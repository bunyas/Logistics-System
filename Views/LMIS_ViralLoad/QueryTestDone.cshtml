
@{
    ViewBag.Title = "Tests Done";
    Layout = "~/Views/Shared/_LayoutHSIP.cshtml";
}

<div class="row">
    <div class="col-lg-3">
        <p>Start Of Reporting Period</p>
        <p><input type="text" id="dp_start_date" name="dp_start_date" class="e-field e-ejinputtext valid" /></p>
    </div>
    <div class="col-lg-3">
        <p>End Of Reporting Period</p>
        <p><input type="text" id="dp_end_date" name="dp_end_date" class="e-field e-ejinputtext valid" /></p>
    </div>
    <div class="col-lg-3">
        <br />
        <input id="LoadDatabtn" style="margin-top:7px;" class="btn btn-block btn-primary" type="button" value="Load Query" onclick="myfunc()" />
    </div>
</div>
<br />
@(Html.EJ().Grid<object>
        ("grid")
        //.Datasource(datasource => datasource.URL("DataSourceGetAll").Adaptor(AdaptorType.UrlAdaptor))
        .AllowPaging()
        .AllowFiltering()
        .AllowTextWrap()
        .AllowGrouping()
        .ShowColumnChooser()
        .AllowScrolling()
        //.ScrollSettings(scroll =>
        //{
        //    scroll.AllowVirtualScrolling().Height(500).Width(0).
        //    VirtualScrollMode(VirtualScrollMode.Normal);
        //})
        .AllowKeyboardNavigation(true)
        .GroupSettings(group => { group.ShowGroupedColumn(true); })
        .TextWrapSettings(wrap => { wrap.WrapMode(WrapMode.Both); })
        .AllowFiltering()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
         //.AllowSearching().SearchSettings(search =>
         //{
         //    search.Fields(fields =>
         //    {
         //        //fields.Add("Outcome");
         //        //fields.Add("Output");
         //        //fields.Add("Indicator");
         //        //fields.Add("Indicator_2");
         //        //fields.Add("PerformanceTargetNotes");
         //        //fields.Add("ExplanatoryNotes");
         //    });
         //    search.Operator(Operator.Contains);
         //    search.IgnoreCase(true);
         //})
         .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
         {
             items.AddTool(ToolBarItems.ExcelExport);
         }))
        .Columns(col =>
        {
            col.Field("SAP_Code").HeaderText("SAP Code").Width("80px").Add();
            col.Field("FacilityCode").HeaderText("Facility Code").Width("180px").Add();
            col.Field("ZoneDescription").HeaderText("Sector").Width("90px").Add();
            col.Field("ImplementingPartnerDescription").HeaderText("IP").Width("90px").Add();
            col.Field("Level_desc").HeaderText("Level of Care").Width("90px").Add();
            col.Field("District_Name").HeaderText("District").Width("100px").Add();
            col.Field("CDCRegion").HeaderText("CDC Region").Width("90px").Add();
            col.Field("ComprehensiveImplimentingPartnerDescription").HeaderText("Comprehensive IP").Width("90px").Add();
            col.Field("FacilityType").HeaderText("Facility Type").Width("90px").Add();
            col.Field("Facility").HeaderText("Facility Name").Width("150px").Add();
            col.Field("SupportedByMAUL").HeaderText("MAUL Supported").Width("90px").Add();
            col.Field("IsAccredited").HeaderText("Is Accredited").Width("90px").Add();
            col.Field("SCTO").HeaderText("SCTO").Width("90px").Add();
            col.Field("StartDate").HeaderText("Start Date").Width("80px").Format("{0:dd/MM/yyyy}").Add();
            col.Field("EndDate").HeaderText("End Date").Width("80px").Format("{0:dd/MM/yyyy}").Add();
            col.Field("DatePrepared").HeaderText("Date Prepared").Format("{0:dd/MM/yyyy}").Width("80px").Add();
            col.Field("OrderType").HeaderText("Order type").Width("90px").Add();
            col.Field("Status").HeaderText("Status").Width("100px").Add();
            col.Field("FinalSubmission").HeaderText("Final Submission").Width("80px").Add();
            col.Field("OrderNumber").HeaderText("Order Number").Width("170px").Add();
            col.Field("Summary_Category").HeaderText("Caregory").AllowFiltering(false).Width("90px").Add();
            col.Field("Summary_Description").Width("200px").AllowFiltering(false).HeaderText("SMC PATIENT SUMMARY").Add();
            col.Field("Quantity").Width("80px").AllowFiltering(true).HeaderText("Quantity").Add();
            //col.Field("Test_Used_2Months").Width("90px").AllowFiltering(false).HeaderText("Consumption").Add();
            //col.Field("Loss_Adjustment").Width("95px").AllowFiltering(false).HeaderText("Losses / Adjustments").Add();
            //col.Field("Test_Remaining").HeaderText("Closing Balance").AllowFiltering(false).Width("80px").Add();
            //col.Field("AdjustedAMC").Format("{0:N1}").HeaderText("Adjusted AMC").AllowFiltering(false).Width("80px").Add();
            //col.Field("Maximum_Stock").Format("{0:N1}").Width("80px").AllowFiltering(false).HeaderText("Months Of Stock").Add();
            //col.Field("Quantity_Required").AllowFiltering(false).Width("80px").HeaderText("Quantity Required").Add();
            //col.Field("Quantity_Allocated").Width("80px").AllowFiltering(false).HeaderText("Quantity Allocated").Add();
            //col.Field("Notes").HeaderText("Notes").AllowFiltering(false).Width("200px").Add();

        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete"); eve.ToolbarClick("OnToolbarClick"); })
)

<script>
    $(function () {
        $("#dp_start_date").ejDatePicker(
            {
                width: '240px',
                dateFormat: "dd/MM/yyyy"
            }
        );
        $("#dp_end_date").ejDatePicker(
            {
                width: '240px',
                dateFormat: "dd/MM/yyyy"
            }
        );
    });
    function OnToolbarClick(args) {
        if (args.itemName.indexOf("Export") > -1) {//if no selectedRecords, currenviewdata will be exported
            this.model["SummaryData"] = JSON.stringify(this.model.dataSource, null, 2147483644);
        }
    }
    function myfunc() {
        var dateobject = $("#dp_start_date").data("ejDatePicker");
        var StartDate = dateobject.getValue();
        var dateobject1 = $("#dp_end_date").data("ejDatePicker");
        var EndDate = dateobject1.getValue();
        $.ajax({
            url: "GetQueryTestDone",
            type: "Get",
            dataType: "json",
            data: {
                "startdate": StartDate,
                "enddate": EndDate,
            },
            success: function (data) {
                var formatData = ej.parseJSON(data);
                var grid = $("#grid").ejGrid("instance");
                grid.dataSource(data);
                grid.dataSource(formatData);
            }
        });
    }
</script>



