
@{
    ViewBag.Title = "HSIPRoutineOrders_SCTO";
    Layout = "~/Views/Shared/_LayoutRFSO.cshtml";
}
 
@section BreadCrumb{
    <div class="row">
        <div class="col-lg-12">
            <ol class="breadcrumb">
                <li>
                    @Html.ActionLink("Home", "IndexHSIP", "Home")
                </li>
                <li class="active">
                    <strong>TB: HSIP Routine Orders</strong>
                </li>
            </ol>
        </div>
    </div>

}
@(Html.EJ().Grid<object>
        ("Grid")
        .Datasource(datasource => datasource.URL("DataSourceHSIPOrders").UpdateURL("DialogUpdate").InsertURL("DialogInsertHSIP").Adaptor(AdaptorType.UrlAdaptor))
        .AllowPaging()
         .AllowFiltering().ShowColumnChooser()
        .AllowTextWrap()
        .AllowGrouping()

        //.AllowScrolling()
        //.ScrollSettings(scroll =>
        //{
        //    scroll.AllowVirtualScrolling().Height(500).Width(0).
        //    VirtualScrollMode(VirtualScrollMode.Normal);
        //})
        .AllowKeyboardNavigation(true)
        .GroupSettings(group => { group.ShowGroupedColumn(true); })
        .TextWrapSettings(wrap => { wrap.WrapMode(WrapMode.Both); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        //.AllowSearching().SearchSettings(search =>
        //{
        //    search.Fields(fields =>
        //    {
        //        //fields.Add("Outcome");
        //        //fields.Add("Output");
        //        //fields.Add("Indicator");
        //        //fields.Add("Indicator_2");
        //        //fields.Add("PerformanceTargetNotes");
        //        //fields.Add("ExplanatoryNotes");
        //    });
        //    search.Operator(Operator.Contains);
        //    search.IgnoreCase(true);
        //})
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.DialogTemplate).DialogEditorTemplateID("#template"); })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    //items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                    items.AddTool(ToolBarItems.Update);
                    items.AddTool(ToolBarItems.Cancel);
                    items.AddTool(ToolBarItems.Search);
                });
            })
        .Columns(col =>
        {
            col.Field("OrderNumber").AllowEditing(false).HeaderText("Order Number").IsPrimaryKey(true).Add();
            col.Field("FacilityCode").AllowEditing(false).HeaderText("Facility").IsPrimaryKey(true).ForeignKeyField("FacilityCode").ForeignKeyValue("Facility").DataSource((IEnumerable<Object>)ViewBag.FacilityDataSource).Add();
            col.Field("StartDate").AllowEditing(false).HeaderText("Start of reporting period").IsPrimaryKey(true).Format("{0:dd/MM/yyyy}").Add();
            col.Field("EndDate").AllowEditing(false).HeaderText("End of reporting period").IsPrimaryKey(true).Format("{0:dd/MM/yyyy}").Add();
            col.Field("DatePrepared").AllowEditing(false).HeaderText("Date prepared").Format("{0:dd/MM/yyyy}").Add();
            col.Field("OrderStatusId").AllowEditing(false).HeaderText("Order Status").ForeignKeyField("StatusId").ForeignKeyValue("Status").DataSource((IEnumerable<Object>)ViewBag.OrderStatusDataSource).Add();
            col.Field("EmergencyOrder").EditType(EditingType.BooleanEdit).AllowEditing(false).HeaderText("Emergency Order").Add();
            col.Field("RFSO_SentBackTofacility").EditType(EditingType.BooleanEdit).AllowEditing(false).HeaderText("Sent Back To Facility").Add();
        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete"); })
)


<script type="text/template" id="template">

    <div class="row">
        <div class="col-lg-3">
            <p>Facility</p>
            <p><input type="text" id="FacilityCode" name="FacilityCode" value="{{:FacilityCode}}" class="e-field e-ejinputtext valid" /></p>
            <p>Date Submitted</p>
            <p><input type="text" id="DatePrepared" name="DatePrepared" value="{{:DatePrepared}}" class="e-field e-ejinputtext valid" /></p>
            
        </div>
        <div class="col-lg-3">
            <p>Start Of Reporting Period</p>
            <p><input type="text" id="StartDate" name="StartDate" value="{{:StartDate}}" class="e-field e-ejinputtext valid" /></p>
            <p>End Of Reporting Period</p>
            <p><input type="text" id="EndDate" name="EndDate" value="{{:EndDate}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        <div class="col-lg-3">
            <p>Order Status</p>
            <p><input type="text" id="OrderStatusId" name="OrderStatusId" value="{{:OrderStatusId}}" class="e-field e-ejinputtext valid" /></p>
            <p>Order Number</p>
            <p><input type="text" id="OrderNumber" readonly name="OrderNumber" value="{{:OrderNumber}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        <div class="col-lg-3">

            <div>
                <table>
                    <tr>
                        <td class="btn btn-danger btn-sm" align="left" style="font-size:medium">   Send report back to Facility ? </td>
                        <td style="transform:scale(2)">
                            {{if RFSO_SentBackTofacility}}
                            <input type="checkbox" id="RFSO_SentBackTofacility" checked="checked" name="RFSO_SentBackTofacility" class="e-field e-checkbox  " style="width:30px" />
                            {{else}}
                            <input type="checkbox" id="RFSO_SentBackTofacility" name="RFSO_SentBackTofacility" class="e-field e-checkbox " style="width:30px" />
                            {{/if}}
                        </td>
                    </tr>
                </table>
                <table>
                    <tr>
                        <td class="btn btn-danger btn-sm" align="left" style="font-size:medium">  Emergency Order ? </td>
                        <td style="transform:scale(2)">
                            {{if EmergencyOrder}}
                            <input type="checkbox" id="EmergencyOrder" checked="checked" name="EmergencyOrder" class="e-field e-checkbox  " style="width:30px" />
                            {{else}}
                            <input type="checkbox" id="EmergencyOrder" name="EmergencyOrder" class="e-field e-checkbox " style="width:30px" />
                            {{/if}}
                        </td>

                    </tr>
                </table>
            </div>
        </div>
    </div>
    <hr />
    @*<div id="order_grid"></div>*@
    <div id="defaultTab" style="width: 100%;">
        <ul>
            <li><a href="#tab1">ORDERS</a></li>
            <li><a href="#tab2">TESTS SUMMARY</a></li>
        </ul>

        <div id="tab1">
            <div class="myDiv">
            </div>
            <div style="min-height:400px;">
                <div id="order_grid"></div>
            </div>
        </div>
        <div id="tab2">
            <div class="myDiv">
            </div>
            <div style="min-height:400px;">
                <div id="Test_summary_grid"></div>
            </div>
        </div>
    </div>
    <br />
</script>

<script>
    //function savess() {
    //    var obj = $("#Grid").ejGrid("instance");
    //    var grd_order = $("#order_grid").ejGrid("instance");
    //    //obj.endEdit();
    //    grd_order.batchSave();
    //    cancelss();
    //}

    function open(args) {

        var objDialog = $("#Grid").data("ejGrid");
        var $dialogWrapper = objDialog.element.find("#" + objDialog._id + "_dialogEdit_wrapper");
        $dialogWrapper.css("top", "0px");
        $dialogWrapper.css("left", "0px");
    }

    function complete(args) {
        if ((args.requestType == "beginedit" || args.requestType == "add") && args.model.editSettings.editMode == "dialogtemplate") {
            $('#' + this._id + '_dialogEdit').ejDialog("option", "title", "TB ORDER TEMPLATE"); //change dialog title
            $("#" + this._id + "_dialogEdit").ejDialog({ open: "open" });
            $("#StartDate").attr("readonly", "readonly");
            $("#EndDate").attr("readonly", "readonly");
            $("#DatePrepared").attr("readonly", "readonly");

            $("#StartDate").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy" }
            );
            $("#EndDate").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy"}
            );
            $("#DatePrepared").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy"}
            );
            $.ajax({
                //url: 'HAT/Districts',
                url: 'GetFacilityData',
                //data: JSON.stringify(mid),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                type: 'GET',
                success: function (data) {
                    if (data.length > 0) {
                        var DropDownListDist = $('#FacilityCode').ejDropDownList({
                            dataSource: data,
                            width: "240px",
                            fields: { value: "FacilityCode", text: "Facility" }, readOnly: true
                        }).data("ejDropDownList");
                        //var ddl2 = $('#FacilityCode').ejDropDownList("instance");
                        //var fc = data[0].FacilityCode;
                        //console.log(JSON.stringify(fc));
                        //ddl2.selectItemByValue(fc);
                    }

                },

            });
            $.ajax({
                //url: 'HAT/Districts',
                url: 'GetOrderStatusData',
                //data: JSON.stringify(mid),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                type: 'GET',
                success: function (data) {
                    if (data.length > 0) {
                        var DropDownListDist = $('#OrderStatusId').ejDropDownList({
                            dataSource: data,
                            width: "240px",
                            fields: { value: "StatusId", text: "Status" },
                        }).data("ejDropDownList");
                    }
                },
            });
            $("#defaultTab").ejTab({ selectedItemIndex: 0 }).ejTab({ showRoundedCorner: true });;

            if (args.requestType == "beginedit" || args.requestType == "add") {
                $("#" + this._id + "_dialogEdit").ejDialog({ open: "open" });

                $("#EditDialog_Grid_Save").ejButton("destroy");
                $($("#EditDialog_Grid_Save").hide()).after('<button id="save" type="button" onclick="savess();" class="btn btn-success btn-sm" > <span class="glyphicon glyphicon-save"></span> Save</button>');
                $("#save").css({ "width": "100px", "height": "50px", "font-size": "17px", "float": "right", "margin-left": "10px", "margin-top": "20px", "margin-bottom": "10px" });
                $("#EditDialog_Grid_Cancel").ejButton("destroy");
                $($("#EditDialog_Grid_Cancel").hide()).after(' <button type="button" id="cancel" onclick="cancelss()" class="btn btn-danger btn-sm" ><span class="glyphicon glyphicon-remove-circle"></span> Cancel</button>');
                $("#cancel").css({ "width": "100px", "height": "50px", "float": "right", "margin-left": "10px", "margin-top": "20px", "margin-bottom": "10px" });

                var header_grid = $('#Grid').ejGrid('instance');

                if (args.requestType == "beginedit") {
                    var order_no = header_grid.getSelectedRecords()[0].OrderNumber;
                }
                if (args.requestType == "add") {
                    var order_no = "new_record";
                }
                $("#order_grid").ejGrid({
                    dataSource: ej.DataManager({ url: "GetOrder", batchUrl: "Update", adaptor: "UrlAdaptor" }),
                    query: new ej.Query().addParams('param_on', order_no),
                    //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                    //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                    allowGrouping: false,

                    //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                    //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                    editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                    allowScrolling: true,
                    scrollSettings: { width: "100%", height: "auto" },
                    allowPaging: false,
                    enableAltRow: true,
                    allowTextWrap: true,
                    textWrapSettings: { wrapMode: "both" },
                    cellEdit: "cellEdit",
                    allowResizeToFit: true,
                    showStackedHeader: true,
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowScrolling: true,
                    queryCellInfo: "queryCellInfo",
                    //cellEdit: "cellEdit",
                    columns: [
                        { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                        { field: "ProductCode", headerText: "Product Code", allowEditing: false, width: 70 },
                        { field: "ItemDescription", headerText: "Product ItemDescription", allowEditing: false, width: 200 },
                        { field: "BasicUnit", headerText: "Pack Size", allowEditing: false, width: 80 },
                        { field: "OpeningBalance", headerText: "Opening Balance", allowEditing: false, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                        { field: "QuantityReceived", headerText: "Quantity Received", allowEditing: false, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Consumption", headerText: "Quantity Used During Two Months", allowEditing: false, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "LossesAdjustments", headerText: "Losses/Adjustments(-/ +)", allowEditing: false, width: 80, editType: ej.Grid.EditingType.Numeric },
                        // { field: "DaysOutofStock", headerText: "Number Of Days Out Of Stock", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "ClosingBalance", headerText: "This Month Physical Count", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, allowEditing: false, width: 80, cssClass: "customCSS" },
                        //{ field: "AdjustedAMC", headerText: "AMC", allowEditing: false, width: 80, cssClass: "customCSS" },
                        //{ field: "MonthsOfStock", headerText: "Months Of Stock", allowEditing: false, width: 80, cssClass: "customCSS" },
                        // { field: "MaximumStockQuantity", headerText: "Maximum Stock Quantity", allowEditing: false, width: 80, cssClass: "customCSS" },
                        { field: "QuantityRequired", headerText: "Quantity Required", allowEditing: false, width: 80, cssClass: "customCSS" },
                        //{ field: "Quantity_Allocated", headerText: "Quantity Allocated",  allowEditing: true, width: 80 },
                        //{ field: "Quantity_Allocated", headerText: "Quantity Allocated", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }, cssClass: "customCSS" },
                        { field: "Notes", headerText: "Notes", allowEditing: true, width: 100 },
                        { field: "RFSONotes", headerText: "SCTO Notes", allowEditing: true, width: 100 }

                    ]
                });

                $("#Test_summary_grid").ejGrid({
                    dataSource: ej.DataManager({ url: "GetOrderTestSummary", batchUrl: "UpdateTestSummary", adaptor: "UrlAdaptor" }),
                    query: new ej.Query().addParams('param_on', order_no),
                    //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                    //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                    allowGrouping: false,
                    //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                    //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                    editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                    allowScrolling: true,
                    scrollSettings: { width: "100%", height: "auto" },
                    allowPaging: false,
                    enableAltRow: true,
                    allowTextWrap: true,
                    textWrapSettings: { wrapMode: "both" },
                    cellEdit: "cellEditRC",
                    allowResizeToFit: true,
                    showStackedHeader: true,
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowScrolling: true,
                    queryCellInfo: "queryCellInfoPatients",
                    columns: [
                        { field: "OrderNumber", headerText: "Order Number", width: 200, visible: false, allowEditing: true, isPrimaryKey: true },
                        { field: "FacilityCode", headerText: "Facility Code", visible: false, allowEditing: true },
                        { field: "StartDate", headerText: "Start Date", visible: false, allowEditing: true },
                        { field: "EndDate", headerText: "End Date", visible: false, allowEditing: true },
                        { field: "ID", visible: false, headerText: "ID", allowEditing: true, width: 70, isPrimaryKey: true },
                        { field: "Summary_Description", headerText: "Summary", allowEditing: false, width: 400 },
                        { field: "Old", headerText: "Old", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Expected_New", headerText: "Expected New", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },

                    ]
                });

                var nullstr = '';
            }
        }
    }

    function queryCellInfo(args) {
        if (args.column.field == "ProductCode" && args.data.ProductCode == null)
            $($(args.cell).parent()).css("backgroundColor", "steelblue").css("color", "white");/*custom css applied to the row */
    }
    //function cellEdit(args) {
    //    if (args.columnName == "product_code" && args.value == "110022") {
    //        args.cancel = true;
    //        //We have prevent editing for the cell which contains FirstName as “Nancy”
    //        var index = $(args.cell).index() + 1;
    //        this.editCell($(args.row).index(), this.getColumnByIndex(index).field);  // making next cell to be edited
    //    }
    //}

    function savess() {
        var datepickObj = $("#DatePrepared").data('ejDatePicker');
        var dp = datepickObj.option('value');

        var st = $("#StartDate").data('ejDatePicker');
        var sd = st.option('value');//StartDate

        var et = $("#EndDate").data('ejDatePicker');
        var ed = et.option('value');//StartDate

        if (dp == null || sd == null || ed == null) {
            alert('Please fill in the missing Information, Date Prepared is Missing !..');
        }
        else {
            if (document.getElementById('RFSO_SentBackTofacility').checked) {
                $('#RFSO_SentBackTofacility').val(true);
            } else {
                $('#RFSO_SentBackTofacility').val(false);
            }
            if (document.getElementById('EmergencyOrder').checked) {
                $('#EmergencyOrder').val(true);
            } else {
                $('#EmergencyOrder').val(false);
            }
            var obj = $("#Grid").ejGrid("instance");
            var grd_order = $("#order_grid").ejGrid("instance");
            var grd_patient = $("#Test_summary_grid").ejGrid("instance");
            obj.endEdit();
            grd_order.batchSave();
            grd_patient.batchSave();
        }
    }
    function cancelss() {
        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
    }

</script>

<style>
    .customCSS.e-rowcell {
        background-color: #EFF5FB;
        /*font-family: 'Bell MT';
        font-style: italic;*/
        /*color: whitesmoke;*/
        /*font-size: 20px;*/
        font: large bolder;
        font-weight: bolder;
        font-family: 'Times New Roman', Times, serif;
    }
</style>




