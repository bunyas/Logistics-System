
@{
    ViewBag.Title = "CustomOrders";
    Layout = "~/Views/Shared/_LayoutFacilityHSIP.cshtml";
}
<script>
 
    function cancelSave(args) {
        $("#Grid").ejWaitingPopup("hide");
        var proddesc = $('#ClubID').val();
        var str = "The edits on "  + " have been Cancelled!!!";
        //$("#SuccessDial").html('<p style="font-family: cursive;color: green;">' + str + '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>');
        $("#CancelDial").html('<p style="font-family: cursive;color: red;">' + str /*+ '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>'*/);

        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
        $("#btnOK").ejButton({
            cssClass: "e-danger",
            size: "large",
            showRoundedCorner: true,
            contentType: "textandimage",
            prefixIcon: "e-icon e-handup",
            visible: false,
            style: "float:right",
            click: function (args) {

                $("#CancelDial").ejDialog("close");
            }
        });

        $("#CancelDial").ejDialog({ enableModal: true });
        $("#CancelDial").ejDialog("open");
    }
</script>
@section BreadCrumb{
<script id="sample" type="text/x-jsrender">
    <div class="footerspan" style="float:right">

        @Html.EJ().Button("btn1").Size(ButtonSize.Medium).Height("30").Width("70").Text("Ok")

        @*@Html.EJ().Button("btn2").Size(ButtonSize.Mini).Height("30").Width("70").Text("Cancel")*@

    </div>
    @*<div class="condition" style="float:left; margin-left:15px">
            @Html.EJ().CheckBox("check1").Text("Don't ask me this again")
        </div>*@
</script>

<script id="cancelfooter" type="text/x-jsrender">
    <div class="footerspan" style="float:right">
        @Html.EJ().Button("btnOK").Size(ButtonSize.Medium).Height("30").Width("70").Text("Ok")
        @Html.EJ().Button("btnCancel").Size(ButtonSize.Mini).Height("30").Width("70").Text("Cancel")

    </div>
    <div class="condition" style="float:left; margin-left:15px">
        @Html.EJ().CheckBox("check1").Text("Don't ask me this again")
    </div>
</script>
@(Html.EJ().Dialog("ErrorList").Title("Exception Thrown").ShowOnInit(false))
@(Html.EJ().Dialog("SuccessDial").Title("Record Saved").ShowFooter(true).FooterTemplateId("sample").ShowOnInit(false))
@(Html.EJ().Dialog("CancelDial").Title("Record Not Saved").ShowFooter(true).FooterTemplateId("cancelfooter").ShowOnInit(false))
    <div class="row">
        <div class="col-lg-12">
            <ol class="breadcrumb">
                <li>
                    @Html.ActionLink("Home", "IndexFacilityHSIP", "Home")
                </li>
                <li class="active">
                    <strong>HIV Testkits: HSIP Custom Order</strong>
                </li>
            </ol>
        </div>
    </div>

}
@(Html.EJ().Grid<object>
        ("Grid")
        .Datasource(datasource => datasource.URL("DataSourceHSIPCustomOrders").UpdateURL("DialogUpdateCustomHSIP").InsertURL("DialogInsertHSIPCustom").Adaptor(AdaptorType.UrlAdaptor))
        .AllowPaging()
         .AllowFiltering().ShowColumnChooser()
        .AllowTextWrap()
        .AllowGrouping()

        //.AllowScrolling()
        //.ScrollSettings(scroll =>
        //{
        //    scroll.AllowVirtualScrolling().Height(500).Width(0).
        //    VirtualScrollMode(VirtualScrollMode.Normal);
        //})
        .AllowKeyboardNavigation(true)
        .GroupSettings(group => { group.ShowGroupedColumn(true); })
        .TextWrapSettings(wrap => { wrap.WrapMode(WrapMode.Both); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        //.AllowSearching().SearchSettings(search =>
        //{
        //    search.Fields(fields =>
        //    {
        //        //fields.Add("Outcome");
        //        //fields.Add("Output");
        //        //fields.Add("Indicator");
        //        //fields.Add("Indicator_2");
        //        //fields.Add("PerformanceTargetNotes");
        //        //fields.Add("ExplanatoryNotes");
        //    });
        //    search.Operator(Operator.Contains);
        //    search.IgnoreCase(true);
        //})
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.DialogTemplate).DialogEditorTemplateID("#template"); })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                    items.AddTool(ToolBarItems.Update);
                    items.AddTool(ToolBarItems.Cancel);
                    //items.AddTool(ToolBarItems.Search);
                });
            })
        .Columns(col =>
        {
            col.Field("OrderNumber").AllowEditing(false).HeaderText("Order Number").IsPrimaryKey(true).Add();
            col.Field("FacilityCode").AllowEditing(false).HeaderText("Facility").ForeignKeyField("FacilityCode").ForeignKeyValue("Facility").DataSource((IEnumerable<Object>)ViewBag.FacilityDataSource).Add();
            col.Field("DatePrepared").AllowEditing(false).HeaderText("Date Prepared").Format("{0:dd/MM/yyyy}").Add();
            col.Field("DateExpected").AllowEditing(false).HeaderText("Date Expected").Format("{0:dd/MM/yyyy}").Add();
            col.Field("FinalSubmission").EditType(EditingType.BooleanEdit).AllowEditing(false).HeaderText("Final Submission").Add();
            col.Field("RFSO_SentBackTofacility").AllowEditing(false).EditType(EditingType.BooleanEdit).HeaderText("Order Sent Back").Add();

        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete").ActionFailure("failure"); })
)

<script type="text/template" id="template">

    <div class="row">
        <div class="col-lg-3">
            <p>Facility</p>
            <p><input type="text" id="FacilityCode" name="FacilityCode" value="{{:FacilityCode}}" class="e-field e-ejinputtext valid" /></p>
            <div>
                <table>
                    <tr>
                        <td class="btn btn-danger btn-sm" align="left" style="font-size:medium">  Final Submission ? </td>
                        <td style="transform:scale(2)">
                            {{if FinalSubmission}}
                            <input type="checkbox" id="FinalSubmission" checked="checked" name="FinalSubmission" class="e-field e-checkbox  " style="width:30px" />
                            {{else}}
                            <input type="checkbox" id="FinalSubmission" name="FinalSubmission" class="e-field e-checkbox " style="width:30px" />
                            {{/if}}
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="col-lg-3">
            <p>Date Submitted</p>
            <p><input type="text" id="DatePrepared" name="DatePrepared" value="{{:DatePrepared}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        <div class="col-lg-3">
            <p>Expected Date</p>
            <p><input type="text" id="DateExpected" name="DateExpected" value="{{:DateExpected}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        <div class="col-lg-3">
            <p>Order Number</p>
            <p><input type="text" id="OrderNumber" readonly name="OrderNumber" value="{{:OrderNumber}}" class="e-field e-ejinputtext valid" /></p>
        </div>
    </div>
    <hr />
    <div id="defaultTab" style="width: 100%;">
        <ul>
            <li><a href="#tab1">HIV Testkits HSIP Custom Order</a></li>
        </ul>

        <div id="tab1">
            <div class="myDiv">
            </div>
            <div style="min-height:400px;">
                <div id="order_grid"></div>
            </div>
        </div>
    </div>
    <br />
</script>

<script>
    function open(args) {

        var objDialog = $("#Grid").data("ejGrid");
        var $dialogWrapper = objDialog.element.find("#" + objDialog._id + "_dialogEdit_wrapper");
        $dialogWrapper.css("top", "0px");
        $dialogWrapper.css("left", "0px");
    }

     var mProducts =@Html.Raw(Json.Encode(ViewBag.ProductDataSource));
    function complete(args) {
        if ((args.requestType == "beginedit" || args.requestType == "add") && args.model.editSettings.editMode == "dialogtemplate") {
            $('#' + this._id + '_dialogEdit').ejDialog("option", "title", "HIV Testkits HSIP Custom Order"); //change dialog title
            $("#" + this._id + "_dialogEdit").ejDialog({ open: "open" });
            window._Event = args.requestType;

            $("#DateExpected").ejDatePicker(
                {
                    width: '240px',
                    minDate: new Date(),
                    dateFormat: "dd/MM/yyyy" }
            );
            $("#DatePrepared").ejDatePicker(
                {
                    width: '240px',
                    maxDate: new Date(),
                    dateFormat: "dd/MM/yyyy" }
            );
            //$.ajax({
            //    //url: 'HAT/Districts',
            //    url: 'GetDistrictData',
            //    //data: JSON.stringify(mid),
            //    contentType: "application/json; charset=utf-8",
            //    dataType: "json",
            //    type: 'GET',
            //    success: function (data) {
            //        if (data.length > 0) {
            //            var DropDownListDist = $('#DistrrictCode').ejDropDownList({
            //                dataSource: data,
            //                width: "240px",
            //                fields: { value: "District_Code", text: "District_Name" },
            //            }).data("ejDropDownList");

            //        }

            //    },

            //});
            $.ajax({
                //url: 'HAT/Districts',
                url: 'GetFacilityData',
                //data: JSON.stringify(mid),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                type: 'GET',
                success: function (data) {
                    if (data.length > 0) {
                        var DropDownListDist = $('#FacilityCode').ejDropDownList({
                            dataSource: data,
                            width: "240px",
                            fields: { value: "FacilityCode", text: "Facility" }, readOnly: true
                        }).data("ejDropDownList");
                        var ddl2 = $('#FacilityCode').ejDropDownList("instance");
                        var fc = data[0].FacilityCode;
                        console.log(JSON.stringify(fc));
                        ddl2.selectItemByValue(fc);
                    }

                },

            });
            //$.ajax({
            //    //url: 'HAT/Districts',
            //    url: 'GetSectorData',
            //    //data: JSON.stringify(mid),
            //    contentType: "application/json; charset=utf-8",
            //    dataType: "json",
            //    type: 'GET',
            //    success: function (data) {
            //        if (data.length > 0) {
            //            var DropDownListDist = $('#DeliveryZoneCode').ejDropDownList({
            //                dataSource: data,
            //                width: "240px",
            //                fields: { value: "ZoneCode", text: "ZoneDescription" },
            //            }).data("ejDropDownList");

            //        }

            //    },

            //});
            $("#defaultTab").ejTab({ selectedItemIndex: 0 }).ejTab({ showRoundedCorner: true });;

            if (args.requestType == "add") {
                $("#" + this._id + "_dialogEdit").ejDialog({ open: "open" })

                var nullstr = '';
            }


            if (args.requestType == "beginedit" || args.requestType == "add") {

                $("#" + this._id + "_dialogEdit").ejDialog({ open: "open" })

                $("#EditDialog_Grid_Save").ejButton("destroy");
                $($("#EditDialog_Grid_Save").hide()).after('<button id="save" type="button" onclick="savess();" class="btn btn-success btn-sm" > <span class="glyphicon glyphicon-save"></span> Save</button>');
                $("#save").css({ "width": "100px", "height": "50px", "font-size": "17px", "float": "right", "margin-left": "10px", "margin-top": "20px", "margin-bottom": "10px" });
                $("#EditDialog_Grid_Cancel").ejButton("destroy");
                $($("#EditDialog_Grid_Cancel").hide()).after(' <button type="button" id="cancel" onclick="cancelss()" class="btn btn-danger btn-sm" ><span class="glyphicon glyphicon-remove-circle"></span> Cancel</button>');
                $("#cancel").css({ "width": "100px", "height": "50px", "float": "right", "margin-left": "10px", "margin-top": "20px", "margin-bottom": "10px" });

                var header_grid = $('#Grid').ejGrid('instance');

                if (args.requestType == "beginedit") {
                    var order_no = header_grid.getSelectedRecords()[0].OrderNumber;
                    $("#DateExpected").ejDatePicker(
                        {
                            width: '240px',
                            dateFormat: "dd/MM/yyyy",
                            //maxDate: new Date()
                            readOnly: true
                        }
                    );

                    $("#DatePrepared").ejDatePicker(
                        {
                            width: '240px',
                            dateFormat: "dd/MM/yyyy",
                            //maxDate: new Date()
                            readOnly: true
                        }
                    );

                }
                if (args.requestType == "add") {
                    var order_no = "new_record";
                }
                $("#order_grid").ejGrid({
                    dataSource: ej.DataManager({ url: "GetOrderCustom", batchUrl: "UpdateCustom", adaptor: "UrlAdaptor" }),
                    query: new ej.Query().addParams('param_on', order_no),
                    //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                    //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                    allowGrouping: false,

                    //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                    toolbarSettings: { showToolbar: true, toolbarItems: ["add", "delete", "cancel"] },
                    editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch',rowPosition:"bottom" },
                    allowScrolling: true,
                    scrollSettings: { width: "100%", height: "auto" },
                    allowPaging: false,
                    enableAltRow: true,
                    allowTextWrap: true,
                    textWrapSettings: { wrapMode: "both" },
                    cellEdit: "cellEdit",
                    allowResizeToFit: true,
                    showStackedHeader: true,
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowScrolling: true,
                    //actionComplete: "successSave",
                    actionFailure: "failure",
                    //cellSave: "cellsave",
                    //queryCellInfo: "queryCellInfo",

                    //cellEdit: "cellEdit",
                    columns: [
                         //{ field: "product_code", width: 200, headerText: "Product", isPrimaryKey: true, foreignKeyField: "product_code", foreignKeyValue: "product_description", dataSource: mProducts },
                        { field: "product_code", width: 200, headerText: "Product", isPrimaryKey: true, editType: "dropdownedit", foreignKeyValue: "product_description", editParams: { fields: { value: "product_code", text: "product_description", groupBy: "Classification" }, enableFilterSearch: true },dataSource: mProducts, },
                        //{ field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                        //{ field: "product_code", headerText: "Product Code", allowEditing: false, width: 70, isPrimaryKey: true },
                        //{ field: "product_description", headerText: "Product Description", allowEditing: false, width: 400 },
                        //{ field: "Basic_Unit", headerText: "Basic Unit", allowEditing: false, width: 80 },
                        { field: "Quantity_Required", headerText: "Quantity Required", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }  },
                        //{ field: "Quantity_Allocated", headerText: "Quantity Allocated", allowEditing: true, width: 80 },
                        { field: "Notes", headerText: "Notes", allowEditing: true, width: 200},
                        { field: "RFSONotes", headerText: "SCTO Notes",    allowEditing: false, width: 200 }
                    ]
                });
                var nullstr = '';
            }
        }
    }

</script>


<script type="text/javascript">

    function savess() {
        var datepickObj = $("#DatePrepared").data('ejDatePicker');
        var dp = datepickObj.option('value');

        if (dp == null) {
            alert('Please fill in the missing Information, Date Prepared is Missing !..');
        }
        else {

            if (document.getElementById('FinalSubmission').checked) {
                $('#FinalSubmission').val(true);
            } else {
                $('#FinalSubmission').val(false);
            }
            var obj = $("#Grid").ejGrid("instance");
            obj.endEdit();
            var grd_order = $("#order_grid").ejGrid("instance");
            grd_order.batchChanges.changed.push();
            grd_order.batchSave();
            window._Event = "Saved";
            cancelss1();
            successSave();
        }
    }
    function cancelss1() {
        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
    }
    function cancelss() {
        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
        window._Event = "add";
        cancelSave();
    }


    function failure(args) {
        $("#Grid").ejWaitingPopup("hide");
        var str = "";
        str = ($($(args.error.responseText).find('b')[0]).text() + ":" + $(args.error.responseText).find('i').text());
        $("#ErrorList").html('<p style="font-family: cursive;color: red;">' + str + '</p></br><button id="button1" style="size: large; showRoundedCorner: true; cssClass:customCss1">---OK---</button>');
        $("#button1").ejButton({

            click: function (args) {
                $("#ErrorList").ejDialog("close");
            }
        });
        $("#ErrorList").ejDialog({ enableModal: true });
        $("#ErrorList").ejDialog("open");
    }

    function cancelSave(args) {
        $("#Grid").ejWaitingPopup("hide");
        var proddesc = $('#OrderNumber').val();
        var str = "The edits on "  + " have been Cancelled!!!";
        //$("#SuccessDial").html('<p style="font-family: cursive;color: green;">' + str + '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>');
        $("#CancelDial").html('<p style="font-family: cursive;color: red;">' + str /*+ '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>'*/);

        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
        $("#btnOK").ejButton({
            cssClass: "e-danger",
            size: "large",
            showRoundedCorner: true,
            contentType: "textandimage",
            prefixIcon: "e-icon e-handup",
            visible: false,
            style: "float:right",
            click: function (args) {

                $("#CancelDial").ejDialog("close");
            }
        });

        $("#CancelDial").ejDialog({ enableModal: true });
        $("#CancelDial").ejDialog("open");
    }

    function successSave(args) {
        $("#Grid").ejWaitingPopup("hide");
        var proddesc = $('#OrderNumber').val();
        var str = "Record" + " Saved Successfully!!!";

        //$("#SuccessDial").html('<p style="font-family: cursive;color: green;">' + str + '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>');
        $("#SuccessDial").html('<p style="font-family: cursive;color: green;">' + str /*+ '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>'*/);


        $("#btn1").ejButton({
            cssClass: "e-primary",
            size: "large",
            showRoundedCorner: true,
            contentType: "textandimage",
            prefixIcon: "e-icon e-handup",
            visible: false,
            style: "float:right",
            click: function (args) {
                $("#SuccessDial").ejDialog("close");
            }
        });

        $("#button1").ejButton({
            cssClass: "e-success",
            size: "medium",
            showRoundedCorner: true,
            contentType: "textandimage",
            prefixIcon: "e-icon e-handup",

            click: function (args) {
                $("#SuccessDial").ejDialog("close");
            }
        });
        $("#SuccessDial").ejDialog({ enableModal: true });
        $("#SuccessDial").ejDialog("open");
    }


</script>

<script id="cancelfooter" type="text/x-jsrender">
    <div class="footerspan" style="float:right">
        @Html.EJ().Button("btnOK").Size(ButtonSize.Medium).Height("30").Width("70").Text("Ok")
        @Html.EJ().Button("btnCancel").Size(ButtonSize.Mini).Height("30").Width("70").Text("Cancel")

    </div>
    <div class="condition" style="float:left; margin-left:15px">
        @Html.EJ().CheckBox("check1").Text("Don't ask me this again")
    </div>

</script>
<script>
    function onchange(sender) {

        var model = $("#Grid").ejGrid("model"); //Will be called when a value is selected in dropdown

        var model1 = $("#Grid").ejGrid("getGridPager").ejPager("model");

        var newLastPage = Math.ceil(model.pageSettings.totalRecordsCount / sender.value);

        if (model1.currentPage > newLastPage)

            $("#Grid").ejGrid("getGridPager").ejPager("goToPage", newLastPage);

        $("#Grid").ejGrid({ "pageSettings": { pageSize: parseInt(sender.value) } }); //Setting the new page size

        renderDrop();

    }
</script>





