
@{
    ViewBag.Title = "AddEdit";
    Layout = "~/Views/Shared/_LayoutFacilityHSIP.cshtml";
}
<script>
    function failure(args) {
        $("#Grid").ejWaitingPopup("hide");
        var str = "";
        str = ($($(args.error.responseText).find('b')[0]).text() + ":" + $(args.error.responseText).find('i').text());
        $("#ErrorList").html('<p style="font-family: cursive;color: red;">' + str + '</p></br><button id="button1" style="size: large; showRoundedCorner: true; cssClass:customCss1">---OK---</button>');
        $("#button1").ejButton({

            click: function (args) {
                $("#ErrorList").ejDialog("close");
            }
        });
        $("#ErrorList").ejDialog({ enableModal: true });
        $("#ErrorList").ejDialog("open");
    }

    function successSave(args) {
        //alert(window._Event);
        if (window._Event == "beginedit" || window._Event == "add") { }
        else {

            $("#Grid").ejWaitingPopup("hide");

            var proddesc = $('#ClubID').val();
            var str = "Record" + " Saved Successfully!!!";

            //$("#SuccessDial").html('<p style="font-family: cursive;color: green;">' + str + '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>');
            $("#SuccessDial").html('<p style="font-family: cursive;color: green;">' + str /*+ '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>'*/);


            $("#btn1").ejButton({
                cssClass: "e-primary",
                size: "large",
                showRoundedCorner: true,
                contentType: "textandimage",
                prefixIcon: "e-icon e-handup",
                visible: false,
                style: "float:right",
                click: function (args) {
                    $("#SuccessDial").ejDialog("close");
                }
            });

            $("#button1").ejButton({
                cssClass: "e-success",
                size: "medium",
                showRoundedCorner: true,
                contentType: "textandimage",
                prefixIcon: "e-icon e-handup",

                click: function (args) {
                    $("#SuccessDial").ejDialog("close");
                }
            });
            $("#SuccessDial").ejDialog({ enableModal: true });
            $("#SuccessDial").ejDialog("open");
        }


    }

    function cancelSave(args) {
        $("#Grid").ejWaitingPopup("hide");
        var proddesc = $('#ClubID').val();
        var str = "The edits on "  + " have been Cancelled!!!";
        //$("#SuccessDial").html('<p style="font-family: cursive;color: green;">' + str + '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>');
        $("#CancelDial").html('<p style="font-family: cursive;color: red;">' + str /*+ '</p></br><button id="button1" style="margin-left: 50%;size: large; showRoundedCorner: true; cssClass:customCss1">OK</button>'*/);

        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
        $("#btnOK").ejButton({
            cssClass: "e-danger",
            size: "large",
            showRoundedCorner: true,
            contentType: "textandimage",
            prefixIcon: "e-icon e-handup",
            visible: false,
            style: "float:right",
            click: function (args) {

                $("#CancelDial").ejDialog("close");
            }
        });

        $("#CancelDial").ejDialog({ enableModal: true });
        $("#CancelDial").ejDialog("open");
    }
</script>
@section BreadCrumb{
<script id="sample" type="text/x-jsrender">
    <div class="footerspan" style="float:right">

        @Html.EJ().Button("btn1").Size(ButtonSize.Medium).Height("30").Width("70").Text("Ok")

        @*@Html.EJ().Button("btn2").Size(ButtonSize.Mini).Height("30").Width("70").Text("Cancel")*@

    </div>
    @*<div class="condition" style="float:left; margin-left:15px">
            @Html.EJ().CheckBox("check1").Text("Don't ask me this again")
        </div>*@
</script>

<script id="cancelfooter" type="text/x-jsrender">
    <div class="footerspan" style="float:right">
        @Html.EJ().Button("btnOK").Size(ButtonSize.Medium).Height("30").Width("70").Text("Ok")
        @Html.EJ().Button("btnCancel").Size(ButtonSize.Mini).Height("30").Width("70").Text("Cancel")

    </div>
    <div class="condition" style="float:left; margin-left:15px">
        @Html.EJ().CheckBox("check1").Text("Don't ask me this again")
    </div>
</script>
@(Html.EJ().Dialog("ErrorList").Title("Exception Thrown").ShowOnInit(false))
@(Html.EJ().Dialog("SuccessDial").Title("Record Saved").ShowFooter(true).FooterTemplateId("sample").ShowOnInit(false))
@(Html.EJ().Dialog("CancelDial").Title("Record Not Saved").ShowFooter(true).FooterTemplateId("cancelfooter").ShowOnInit(false))
    <div class="row">
        <div class="col-lg-12">
            <ol class="breadcrumb">
                <li>
                    @Html.ActionLink("Home", "IndexFacilityHSIP", "Home")
                </li>
                <li class="active">
                    <strong>ART: HSIP Routine Order</strong>
                </li>
            </ol>
        </div>
    </div>

}
@(Html.EJ().Grid<object>
        ("Grid")
        .Datasource(datasource => datasource.URL("DataSourceHSIPOrders").UpdateURL("DialogUpdateHSIP").InsertURL("DialogInsertHSIP").Adaptor(AdaptorType.UrlAdaptor))
        .AllowPaging()
         .AllowFiltering().ShowColumnChooser()
        .AllowTextWrap()
        .AllowGrouping()

        //.AllowScrolling()
        //.ScrollSettings(scroll =>
        //{
        //    scroll.AllowVirtualScrolling().Height(500).Width(0).
        //    VirtualScrollMode(VirtualScrollMode.Normal);
        //})
        .AllowKeyboardNavigation(true)
        .GroupSettings(group => { group.ShowGroupedColumn(true); })
        .TextWrapSettings(wrap => { wrap.WrapMode(WrapMode.Both); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        //.AllowSearching().SearchSettings(search =>
        //{
        //    search.Fields(fields =>
        //    {
        //        //fields.Add("Outcome");
        //        //fields.Add("Output");
        //        //fields.Add("Indicator");
        //        //fields.Add("Indicator_2");
        //        //fields.Add("PerformanceTargetNotes");
        //        //fields.Add("ExplanatoryNotes");
        //    });
        //    search.Operator(Operator.Contains);
        //    search.IgnoreCase(true);
        //})
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.DialogTemplate).DialogEditorTemplateID("#template"); })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                    items.AddTool(ToolBarItems.Update);
                    items.AddTool(ToolBarItems.Cancel);
                    //items.AddTool(ToolBarItems.Search);
                });
            })
        .Columns(col =>
        {
            col.Field("OrderNumber").AllowEditing(false).HeaderText("Order Number").IsPrimaryKey(true).Add();
            col.Field("FacilityCode").AllowEditing(false).HeaderText("Facility").ForeignKeyField("FacilityCode").ForeignKeyValue("Facility").DataSource((IEnumerable<Object>)ViewBag.FacilityDataSource).Add();
            col.Field("StartDate").AllowEditing(false).HeaderText("Start of reporting period").Format("{0:dd/MM/yyyy}").Add();
            col.Field("EndDate").AllowEditing(false).HeaderText("End of reporting period").Format("{0:dd/MM/yyyy}").Add();
            col.Field("DatePrepared").AllowEditing(false).HeaderText("Date prepared").Format("{0:dd/MM/yyyy}").Add();
            col.Field("FinalSubmission").EditType(EditingType.BooleanEdit).AllowEditing(false).HeaderText("Final Submission").Add();
            col.Field("EmergencyOrder").EditType(EditingType.BooleanEdit).AllowEditing(false).HeaderText("Emergency Order").Add();
            col.Field("RFSO_SentBackTofacility").AllowEditing(false).HeaderText("Order Sent Back").Add();
            col.Field("EditedBy").HeaderText("Modified by").TextAlign(TextAlign.Right).Add();
            col.Field("EditedDate").HeaderText("Date modified").Format("{0:dd/MM/yyyy}").Add();
        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete").ActionFailure("failure"); })
)

<script type="text/template" id="template">

    <div class="row">
        @*<div class="col-lg-3">
            <p>District</p>
            <p><input type="text" id="DistrrictCode" name="DistrrictCode" value="{{:DistrrictCode}}" class="e-field e-ejinputtext valid" /></p>
            <p>Sector</p>
        <p><input type="text" id="DeliveryZoneCode" name="DeliveryZoneCode" value="{{:DeliveryZoneCode}}" class="e-field e-ejinputtext valid" /></p>
        </div>*@
        <div class="col-lg-3">
           
            <p>Facility</p>
            <p><input type="text" id="FacilityCode" name="FacilityCode" value="{{:FacilityCode}}" class="e-field e-ejinputtext valid" /></p>
            <p>Order Number</p>
            <p><input type="text" id="OrderNumber" readonly name="OrderNumber" value="{{:OrderNumber}}" class="e-field e-ejinputtext valid" /></p>  
        </div>
        <div class="col-lg-3">
            <p>Start Of Reporting Period</p>
            <p><input type="text" id="StartDate" name="StartDate" value="{{:StartDate}}" class="e-field e-ejinputtext valid" /></p>
            <p>Date Submitted</p>
            <p><input type="text" id="DatePrepared" name="DatePrepared" value="{{:DatePrepared}}" class="e-field e-ejinputtext valid" /></p>

        </div>
        <div class="col-lg-3">
            <p>End Of Reporting Period</p>
            <p><input type="text" id="EndDate" name="EndDate" value="{{:EndDate}}" class="e-field e-ejinputtext valid" /></p>
           
            <table>
                <tr>
                    <td class="btn btn-danger btn-sm" align="left" style="font-size:medium">  Final Submission ? </td>
                    <td style="transform:scale(2)">
                        {{if FinalSubmission}}
                        <input type="checkbox" id="FinalSubmission" checked="checked" name="FinalSubmission" class="e-field e-checkbox  " style="width:30px" />
                        {{else}}
                        <input type="checkbox" id="FinalSubmission" name="FinalSubmission" class="e-field e-checkbox " style="width:30px" />
                        {{/if}}
                    </td>

                </tr>
            </table>
        </div>

        <div class="col-lg-3">
            <table>
                <tr>
                    <td class="btn btn-danger btn-sm" align="left" style="font-size:medium">  Emergency Order ? </td>
                    <td style="transform:scale(2)">
                        {{if EmergencyOrder}}
                        <input type="checkbox" id="EmergencyOrder" checked="checked" name="EmergencyOrder" class="e-field e-checkbox  " style="width:30px" />
                        {{else}}
                        <input type="checkbox" id="EmergencyOrder" name="EmergencyOrder" class="e-field e-checkbox " style="width:30px" />
                        {{/if}}
                    </td>

                </tr>
            </table>
        </div>
               </div>
   
        <hr />
        <div id="defaultTab" style="width: 100%;">
            <ul>
                <li><a href="#tab1">ORDERS</a></li>
                <li><a href="#tab2">ADULT PATIENTS</a></li>
                <li><a href="#tab3">PAEDIATRIC PATIENTS</a></li>
                <li><a href="#tab4">OTHER PATIENTS</a></li>
                <li><a href="#tab5">EXTRA PATIENT REGIMENS (ADULT)</a></li>
                <li><a href="#tab6">EXTRA PATIENT REGIMENS (PAEDIATRIC)</a></li>
            </ul>

            <div id="tab1">
                <div class="myDiv">
                </div>
                <div style="min-height:400px;">
                    <div id="order_grid"></div>
                </div>
            </div>
            <div id="tab2">
                <div class="myDiv">
                </div>
                <div style="min-height:400px;">
                    <div id="patient_grid"></div>
                </div>
            </div>
            <div id="tab3">
                <div class="myDiv">
                </div>
                <div style="min-height:400px;">
                    <div id="patient_paediatric_grid"></div>
                </div>
            </div>
            <div id="tab4">
                <div class="myDiv">
                </div>
                <div style="min-height:400px;">
                    <div id="patient_other_grid"></div>
                </div>
            </div>
            <div id="tab5">
                <div class="myDiv">
                </div>
                <div style="min-height:400px;">
                    <div id="extra_regimen_grid"></div>
                </div>
            </div>
            <div id="tab6">
                <div class="myDiv">
                </div>
                <div style="min-height:400px;">
                    <div id="extra_regimen_paediatric_grid"></div>
                </div>
            </div>
        </div>
        <br />
</script>
<script>

    function open(args) {

        var objDialog = $("#Grid").data("ejGrid");
        var $dialogWrapper = objDialog.element.find("#" + objDialog._id + "_dialogEdit_wrapper");
        $dialogWrapper.css("top", "0px");
        $dialogWrapper.css("left", "0px");
    }

    function complete(args) {


        if ((args.requestType == "beginedit" || args.requestType == "add") && args.model.editSettings.editMode == "dialogtemplate") {
            $('#' + this._id + '_dialogEdit').ejDialog("option", "title", "ART HSIP Routine Order"); //change dialog title
            $("#" + this._id + "_dialogEdit").ejDialog({ open: "open" })
            window._Event = args.requestType;
            $("#StartDate").attr("readonly", "readonly");
            $("#EndDate").attr("readonly", "readonly");


            $("#StartDate").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy" }
                );
            $("#EndDate").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy" }
            );
            $("#DatePrepared").ejDatePicker(
                {
                    width: '240px',
                    minDate: new Date(),
                    dateFormat: "dd/MM/yyyy"}
            );

            $("#defaultTab").ejTab({ selectedItemIndex: 0 }).ejTab({ showRoundedCorner: true });

            if (args.requestType == "beginedit" || args.requestType == "add") {
                var myCond = false;
                //$("#" + this._id + "_dialogEdit").ejDialog({ open: "open" })


                $.ajax({
                    //url: 'HAT/Districts',
                    url: 'GetFacilityData',
                    //data: JSON.stringify(mid),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    type: 'GET',
                    success: function (data) {
                        if (data.length > 0) {
                            var DropDownListDist = $('#FacilityCode').ejDropDownList({
                                dataSource: data,
                                width: "240px",
                                fields: { value: "FacilityCode", text: "Facility" }, readOnly: true
                                //change: 'change',
                            }).data("ejDropDownList");
                            var ddl2 = $('#FacilityCode').ejDropDownList("instance");
                            var fc = data[0].FacilityCode;
                            console.log(JSON.stringify(fc));
                            ddl2.selectItemByValue(fc);

                            if (fc == null) {
                                alert('');
                            }
                            else {
                                //getFacilitySector( int facilitycode)
                                $.ajax({
                                    url: 'getFacilitySector?facilitycode=' + fc,

                                    //data: JSON.stringify(mid),
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    type: 'GET',
                                    success: function (fzone) {
                                        if (fzone != null) {

                                            var today = new Date();
                                            var daytoday = today.getDate();
                                            var todaymonth = today.getMonth();
                                            todaymonth++;
                                            //alert('Dear Customer, Kindly go to WAOS and place you ARV order. Should you want to place an order for ARV commodities not MoH template, please go back and click on custom Orders..!');
                                            //myCond = false;
                                            //cancelss();
                                            //alert('Zone: ' + fzone + ' daytoday: ' + daytoday + ' todaymonth: ' + todaymonth);
                                            //if (daytoday >= 17 && daytoday < 25) {
                                            //    alert('Dear Customer, Kindly go to WAOS and place you ARV order. Should you want to place an order for ARV commodities not MoH template, please go back and click on custom Orders..!');
                                            //    myCond = false;
                                            //    cancelss();
                                            //}
                                            //else
                                            {
                                                if ((todaymonth % 2) == 0) {
                                                    if (fzone >= 1 && fzone <= 3) {
                                                        // alert('Correct');
                                                        myCond = true;
                                                        details(args);

                                                    }
                                                    else {
                                                        //alert('Wrong Zone ');
                                                        alert('Dear Customer, Kindly go to WAOS and place you ARV order. Should you want to place an order for ARV commodities not MoH template, please go back and click on custom Orders..!');
                                                        //alert('Sector : ' + fzone + '  ' + 'Dear Customer, this is not your reporting period, should you want to place and Emergency order, please go to Custom Orders..!');
                                                        myCond = true;
                                                        details(args);
                                                        // Just to show the notification to the client, but he/she should go ahead $ plave his order
                                                        //cancelss();
                                                    }


                                                }
                                                else {
                                                    if (fzone >= 4 && fzone <= 6) {
                                                        //alert('Correct');
                                                        myCond = true;
                                                        details(args);

                                                    }
                                                    else {
                                                        //alert('Wrong Zone ');
                                                        alert('Dear Customer, Kindly go to WAOS and place you ARV order. Should you want to place an order for ARV commodities not MoH template, please go back and click on custom Orders..!');
                                                        //alert('Sector : ' + fzone + '  ' + 'Dear Customer, this is not your reporting period, should you want to place and Emergency order, please go to Custom Orders..!');
                                                        myCond = true;
                                                        details(args);
                                                         // Just to show the notification to the client, but he/she should go ahead $ plave his order
                                                       // cancelss();
                                                    }

                                                }
                                            }

                                        }
                                    },
                                });
                            }
                        }
                    },
                });
            }
        }
    }

    function details(args)
    {
        $("#EditDialog_Grid_Save").ejButton("destroy");
        $($("#EditDialog_Grid_Save").hide()).after('<button id="save" type="button" onclick="savess();" class="btn btn-success btn-sm" > <span class="glyphicon glyphicon-save"></span> Save</button>');
        $("#save").css({ "width": "100px", "height": "50px", "font-size": "17px", "float": "right", "margin-left": "10px", "margin-top": "20px", "margin-bottom": "10px" });
        $("#EditDialog_Grid_Cancel").ejButton("destroy");
        $($("#EditDialog_Grid_Cancel").hide()).after(' <button type="button" id="cancel" onclick="cancelss()" class="btn btn-danger btn-sm" ><span class="glyphicon glyphicon-remove-circle"></span> Cancel</button>');
        $("#cancel").css({ "width": "100px", "height": "50px", "float": "right", "margin-left": "10px", "margin-top": "20px", "margin-bottom": "10px" });


        var header_grid = $('#Grid').ejGrid('instance');

        if (args.requestType == "beginedit") {
            var order_no = header_grid.getSelectedRecords()[0].OrderNumber;
 
            $("#DatePrepared").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy",
                    //maxDate: new Date()
                    readOnly: true
                }
            );

            $("#order_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrder", batchUrl: "Update", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,

                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEdit",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                queryCellInfo: "queryCellInfo",
                cellSave: "cellsave",
                actionComplete: "successSave",
                actionFailure: "failure",
                allowKeyBoardNavigation: true,
                //cellEdit: "cellEdit",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: false },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: false },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: false },
                    { field: "product_code", headerText: "Product Code", allowEditing: true, width: 70, isPrimaryKey: true },
                    { field: "product_description", headerText: "Product Description", allowEditing: false, width: 230 },
                    { field: "Basic_Unit", headerText: "Basic Unit", allowEditing: false, width: 80 },
                    { field: "OpeningBalance", headerText: "Opening Balance", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                    { field: "QuantityRecieved", headerText: "Quantity Received", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "ART_eMTCT_Consumption", headerText: "ART & e-MTCT Consumption", width: 80, allowEditing: true, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Losses_Adjustments", headerText: "Losses / Adjustments", width: 80, allowEditing: true, editType: ej.Grid.EditingType.Numeric },
                    { field: "DaysOutOfStockDuring2Months", headerText: "Days Out of Stock During 2 Month Cycle", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "AdjustedAMC", headerText: "Adjusted AMC", format: "{0:N0}", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                    { field: "ClosingBalance", headerText: "Closing Balance", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, allowEditing: false, width: 80, cssClass: "customCSS" },
                    { field: "Months_Stock_atHand", headerText: "Months Of Stock At Hand", format: "{0:N1}", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS"},
                    { field: "Quantity_Required_Current_Patients", headerText: "Quantity Required For Current Patients", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS"},
                    //{ field: "Quantity_Allocated", headerText: "Quantity Allocated", allowEditing: true, width: 80 },
                    { field: "Notes", headerText: "Notes", width: 100, allowEditing: true },
                    { field: "RFSONotes", headerText: "SCTO Notes", width: 100, allowEditing: false }
                ]
            });

            $("#patient_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPatients", batchUrl: "UpdatePatients", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                queryCellInfo: "queryCellInfoPatients",
                //showSummary: true,
                //summaryRows: [{
                //    title: "Sum",
                //    summaryColumns: [{
                //        summaryType: ej.Grid.SummaryType.Sum,
                //        displayColumn: "No_Existing",
                //        dataMember: "No_Existing"
                //    }]
                //}],
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "regimen_code", visible: false, headerText: "Regimen Code", allowEditing: false, width: 70, isPrimaryKey: true },
                    { field: "regimen", headerText: "Regimen", allowEditing: false, width: 400 },
                    { field: "No_Existing", headerText: "No. Existing", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "No_New", headerText: "No. New", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    //{ field: "Pregnant_Existing", headerText: "Pregnant Existing", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    //{ field: "Pregnant_New", headerText: "Pregnant New", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

            $("#patient_paediatric_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPatientsPaediatric", batchUrl: "UpdatePatientsPaediatric", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                queryCellInfo: "queryCellInfoPatients",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "regimen_code", visible: false, headerText: "Regimen Code", allowEditing: true, width: 70, isPrimaryKey: true },
                    { field: "regimen", headerText: "Regimen", allowEditing: false, width: 400 },
                    { field: "Existing_0_3Yrs", headerText: "Existing 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_0_3Yrs", headerText: "New 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_3_10Yrs", headerText: "Existing 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_3_10Yrs", headerText: "New 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_10_15Yrs_Less35Kg", headerText: "Existing 10<15Yrs Less 35Kg", width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_10_15Yrs_Less35Kg", headerText: "New 10<15Yrs Less 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_10_15Yrs_Greater35Kg", headerText: "Existing 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_10_15Yrs_Greater35Kg", headerText: "New 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

            $("#patient_other_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPatientsOther", batchUrl: "UpdatePatientsOther", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                queryCellInfo: "queryCellInfoPatients",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "regimen_code", visible: false, headerText: "Regimen Code", allowEditing: true, width: 70, isPrimaryKey: true },
                    { field: "regimen", headerText: "Regimen", allowEditing: false, width: 400 },
                    { field: "Adult", headerText: "Adults", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Child", headerText: "Children", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

            $("#extra_regimen_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPatientsExtraRegimen", batchUrl: "UpdatePatientsExtraRegimen", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditExtraRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                enableResponsiveRow: true,
                allowScrolling: true,
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "RegimenCode", visible: false, headerText: "Regimen Code", allowEditing: false, width: 70, isPrimaryKey: true },
                    { field: "RegimenDesc", headerText: "Regimen", allowEditing: false, width: 200 },
                    { field: "Patients_Existing", headerText: "Existing Patients", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Patients_New", headerText: "New Patients", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

            $("#extra_regimen_paediatric_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPaediatricExtraRegimen", batchUrl: "UpdatePaediatricExtraRegimen", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditExtraRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                queryCellInfo: "queryCellInfoPatients",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "RegimenCode", visible: false, headerText: "Regimen Code", allowEditing: false, width: 70, isPrimaryKey: true },
                    { field: "RegimenDesc", headerText: "Regimen", allowEditing: false, width: 400 },
                    { field: "Existing_0_3Yrs", headerText: "Existing 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_0_3Yrs", headerText: "New 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_3_10Yrs", headerText: "Existing 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_3_10Yrs", headerText: "New 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_10_15Yrs_Less35Kg", headerText: "Existing 10<15Yrs Less 35Kg", width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_10_15Yrs_Less35Kg", headerText: "New 10<15Yrs Less 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_10_15Yrs_Greater35Kg", headerText: "Existing 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_10_15Yrs_Greater35Kg", headerText: "New 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

        }

        if (args.requestType == "add") {
            var order_no = "new_record";
            var today = new Date();
            var daytoday = today.getDate();
            var todaymonth = today.getMonth();

            var myyear = today.getFullYear();

            ////Manually create a date to introduce '0' in months before Oct and days beo
            //var my_date = (daytoday + '/' + todaymonth + '/' + myyear);
            // alert()

            var stDate = (daytoday + '/' + todaymonth + '/' + myyear);
            var enDate = (daytoday + '/' + todaymonth + '/' + myyear);

            var startDate = new Date(myyear, todaymonth, daytoday);
            var endDate = new Date(myyear, todaymonth, daytoday);
            var newMonth = todaymonth;
            var newYear = myyear;
            if (todaymonth == 0) {
                newMonth = 12;
                newYear = myyear - 1;
            }
            else if (todaymonth == 1) {
                newMonth = 1;
                //newYear = myyear - 1;
            }
            //else {
            //    newMonth = todaymonth - 2;
            //}
            if (daytoday >= 25) {
                startDate = new Date(myyear, todaymonth - 1, '01');
                //var mmstart = todaymonth - 1;
                var mmstart = todaymonth + 1;
                var mmStr = '';
                if (todaymonth < 10) {
                    mmStr = '0' + mmstart;
                }
                else {
                    mmStr = mmstart;
                }

                //sDate = ('25' + '/' + mmStr + '/' + myyear);
                //  sDate = new Date (myyear, todaymonth, '25');

                stDate = ('25/' + mmStr + '/' + myyear);

                //else
                {
                    //endDate = new Date(myyear, todaymonth , lastday);
                    var currentMonth = todaymonth - 1;
                    // var currentMonth = todaymonth;
                    var lastday = 31;
                    if (currentMonth == 0 || currentMonth == 2 || currentMonth == 4 || currentMonth == 6 ||
                        currentMonth == 7
                        || currentMonth == 9 || currentMonth == 11) {


                        endDate = new Date(myyear, currentMonth, lastday);
                    }
                    else {
                        if (currentMonth == 1) {
                            lastday = 28; // Need to cater for leap year
                            endDate = new Date(myyear, currentMonth, lastday);
                        }
                        else {
                            lastday = 30;
                            endDate = new Date(myyear, currentMonth, lastday);
                        }
                    }


                    var mmend = todaymonth + 2;
                    //var mmend = todaymonth + 1;
                    //var mmend = todaymonth;
                    var mmStr = '';
                    if (todaymonth < 10) {
                        mmStr = '0' + mmend;
                    }
                    else {
                        mmStr = mmend;
                    }


                    //eDate = ('05' + '/' + mmStr + '/' + myyear);
                    // eDate = new Date(myyear, mmend, '5'); 

                    enDate = ('05/' + mmStr + '/' + myyear);


                }

            }

            else
            /*if (daytoday >= 25)*/ {
                startDate = new Date(myyear, todaymonth - 2, '01');
                var mmstart = newMonth;

                var mmStr = '';
                if (newMonth < 10) {
                    mmStr = '0' + mmstart;
                }
                else {
                    mmStr = mmstart;
                }
                stDate = ('25/' + mmStr + '/' + myyear);

                var currentMonth = todaymonth - 1;
                var lastday = 31;
                if (currentMonth == 0 || currentMonth == 2 || currentMonth == 4 || currentMonth == 6 ||
                    currentMonth == 7
                    || currentMonth == 9 || currentMonth == 11) {
                    endDate = new Date(myyear, currentMonth, lastday);
                }
                else {
                    if (currentMonth == 8 || currentMonth == 3 || currentMonth == 5 || currentMonth == 10) {
                        lastday = 30;
                        endDate = new Date(myyear, currentMonth, lastday);
                    }
                    else {
                        lastday = 28;// Need to cater for leap year
                        endDate = new Date(myyear, currentMonth, lastday);
                    }
                }


                var mmend = todaymonth + 1;
                //var mmend = todaymonth;
                var mmStr = '';
                if (todaymonth < 10) {
                    mmStr = '0' + mmend;
                }
                else {
                    mmStr = mmend;
                }
                enDate = ('05/' + mmStr + '/' + myyear);

                if (todaymonth == 0) {
                    //startDate = new Date(--myyear, '11', '01');
                    startDate = new Date(--myyear, '10', '01');
                    endDate = new Date(myyear, '11', '31');

                    // stDate = ('25/12/' + --myyear);
                    stDate = ('25/12/' + myyear);

                }
            }
            // alert('startdate:' + startDate + '\nenddate' + endDate);
            //alert('startdate:' + stDate + '\nenddate' + enDate);
            var testdate = new Date(++myyear, 0, '05');
            var x = $("#EndDate").ejDatePicker('instance');
            x.option('value', endDate);//StartDate

            var y = $("#StartDate").ejDatePicker('instance');
            y.option('value', startDate);//StartDate
            var FC = "new_record";


            var facCode = $('#FacilityCode').data("ejDropDownList");
            var fcCode = facCode.option("value");


            $("#order_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrder_Add?FC=" + fcCode + "&StartDate=" + stDate + "&EndDate=" + enDate, batchUrl: "Update", adaptor: "UrlAdaptor" }),
                //query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,

                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEdit",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                queryCellInfo: "queryCellInfo",
                cellSave: "cellsave",
                actionComplete: "successSave",
                actionFailure: "failure",
                allowKeyBoardNavigation: true,
                //cellEdit: "cellEdit",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: false },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: false },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: false },
                    { field: "product_code", headerText: "Product Code", allowEditing: true, width: 70, isPrimaryKey: true },
                    { field: "product_description", headerText: "Product Description", allowEditing: false, width: 230 },
                    { field: "Basic_Unit", headerText: "Basic Unit", allowEditing: false, width: 80 },
                    { field: "OpeningBalance", headerText: "Opening Balance", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                    { field: "QuantityRecieved", headerText: "Quantity Received", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "ART_eMTCT_Consumption", headerText: "ART & e-MTCT Consumption", width: 80, allowEditing: true, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Losses_Adjustments", headerText: "Losses / Adjustments", width: 80, allowEditing: true, editType: ej.Grid.EditingType.Numeric},
                    { field: "DaysOutOfStockDuring2Months", headerText: "Days Out of Stock During 2 Month Cycle", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "AdjustedAMC", headerText: "Adjusted AMC", format: "{0:N1}", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS"},
                    { field: "ClosingBalance", headerText: "Closing Balance", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                    { field: "Months_Stock_atHand", headerText: "Months Of Stock At Hand", format: "{0:N1}", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS"},
                    { field: "Quantity_Required_Current_Patients", headerText: "Quantity Required For Current Patients", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS"},
                    //{ field: "Quantity_Allocated", headerText: "Quantity Allocated", allowEditing: true, width: 80 },
                    { field: "Notes", headerText: "Notes", width: 100, allowEditing: true },
                    { field: "RFSONotes", headerText: "SCTO Notes", width: 100, allowEditing: false }
                ]
            });

            $("#patient_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPatients", batchUrl: "UpdatePatients", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                queryCellInfo: "queryCellInfoPatients",
                //showSummary: true,
                //summaryRows: [{
                //    title: "Sum",
                //    summaryColumns: [{
                //        summaryType: ej.Grid.SummaryType.Sum,
                //        displayColumn: "No_Existing",
                //        dataMember: "No_Existing"
                //    }]
                //}],
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "regimen_code", visible: false, headerText: "Regimen Code", allowEditing: false, width: 70, isPrimaryKey: true },
                    { field: "regimen", headerText: "Regimen", allowEditing: false, width: 400 },
                    { field: "No_Existing", headerText: "No. Existing", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "No_New", headerText: "No. New", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    //{ field: "Pregnant_Existing", headerText: "Pregnant Existing", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    //{ field: "Pregnant_New", headerText: "Pregnant New", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

            $("#patient_paediatric_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPatientsPaediatric", batchUrl: "UpdatePatientsPaediatric", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                queryCellInfo: "queryCellInfoPatients",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "regimen_code", visible: false, headerText: "Regimen Code", allowEditing: true, width: 70, isPrimaryKey: true },
                    { field: "regimen", headerText: "Regimen", allowEditing: false, width: 400 },
                    { field: "Existing_0_3Yrs", headerText: "Existing 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_0_3Yrs", headerText: "New 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_3_10Yrs", headerText: "Existing 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_3_10Yrs", headerText: "New 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_10_15Yrs_Less35Kg", headerText: "Existing 10<15Yrs Less 35Kg", width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_10_15Yrs_Less35Kg", headerText: "New 10<15Yrs Less 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_10_15Yrs_Greater35Kg", headerText: "Existing 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_10_15Yrs_Greater35Kg", headerText: "New 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

            $("#patient_other_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPatientsOther", batchUrl: "UpdatePatientsOther", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                queryCellInfo: "queryCellInfoPatients",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "regimen_code", visible: false, headerText: "Regimen Code", allowEditing: true, width: 70, isPrimaryKey: true },
                    { field: "regimen", headerText: "Regimen", allowEditing: false, width: 400 },
                    { field: "Adult", headerText: "Adults", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Child", headerText: "Children", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

            $("#extra_regimen_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPatientsExtraRegimen", batchUrl: "UpdatePatientsExtraRegimen", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditExtraRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                allowScrolling: true,
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "RegimenCode", visible: false, headerText: "Regimen Code", allowEditing: false, width: 70, isPrimaryKey: true },
                    { field: "RegimenDesc", headerText: "Regimen", allowEditing: false, width: 200 },
                    { field: "Patients_Existing", headerText: "Existing Patients", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Patients_New", headerText: "New Patients", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

            $("#extra_regimen_paediatric_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrderPaediatricExtraRegimen", batchUrl: "UpdatePaediatricExtraRegimen", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,
                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEditExtraRC",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                actionComplete: "successSave",
                actionFailure: "failure",
                queryCellInfo: "queryCellInfoPatients",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                    { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                    { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                    { field: "RegimenCode", visible: false, headerText: "Regimen Code", allowEditing: false, width: 70, isPrimaryKey: true },
                    { field: "RegimenDesc", headerText: "Regimen", allowEditing: false, width: 400 },
                    { field: "Existing_0_3Yrs", headerText: "Existing 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_0_3Yrs", headerText: "New 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_3_10Yrs", headerText: "Existing 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_3_10Yrs", headerText: "New 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_10_15Yrs_Less35Kg", headerText: "Existing 10<15Yrs Less 35Kg", width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_10_15Yrs_Less35Kg", headerText: "New 10<15Yrs Less 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "Existing_10_15Yrs_Greater35Kg", headerText: "Existing 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                    { field: "New_10_15Yrs_Greater35Kg", headerText: "New 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                ]
            });

        }


        var nullstr = '';
    }
    function queryCellInfo(args) {
        if (args.column.field == "product_code" && args.data.product_code == null)
            $($(args.cell).parent()).css("backgroundColor", "steelblue").css("color", "white");/*custom css applied to the row */
    }

    function queryCellInfoPatients(args) {
        if (args.column.field == "regimen_code" && args.data.regimen_code == null)
            $($(args.cell).parent()).css("backgroundColor", "steelblue").css("color", "white");/*custom css applied to the row */
    }

    function cellEdit(args) {
        var pc = args.model.selectedRecords[0].product_code;
        var cb = args.model.selectedRecords[0].ClosingBalance;
        if (pc == null || cb == null) {
            args.cancel = true;
        }

    }

    function cellEditRC(args) {
        var rc = args.model.selectedRecords[0].regimen_code;
         if (rc == null) {
            args.cancel = true;
        }
    }
    //RegimenCode
    function cellEditExtraRC(args) {
        var rc = args.model.selectedRecords[0].RegimenCode;
        if (rc == null) {
            args.cancel = true;
        }
    }
</script>


<script type="text/javascript">
    function cellsave(args) {

        var gridObj = $("#order_grid").data("ejGrid");
        var rowIndex = gridObj.selectedRowsIndexes;
        var amc_cellIndex = 12;
        var MonthsOfStock_cellIndex = 14;
        var qty_required_cellIndex = 15;

        if (args.columnName == "DaysOutOfStockDuring2Months") {
            //amc
            var daysOutStock = args.value;
            var consumption = args.rowData.ART_eMTCT_Consumption;
            //var max_stock = (consumption * 2);
            var amc = (consumption * 30) / (60 - daysOutStock);
            gridObj.model.columns[12]['allowEditing'] = true;
            gridObj.setCellText(rowIndex, amc_cellIndex, amc.toFixed(1));
            gridObj.model.columns[12]['allowEditing'] = false;

            //quantity required
            //var consumption = args.value;
            var tests_remaining = args.rowData.ClosingBalance;
            var month_stock = tests_remaining / amc;
            gridObj.model.columns[14]['allowEditing'] = true;
            gridObj.setCellText(rowIndex, MonthsOfStock_cellIndex, month_stock.toFixed(1));
            gridObj.model.columns[14]['allowEditing'] = false;

            //quantity required
            var qty_required = (4 * amc) - tests_remaining;
            gridObj.model.columns[15]['allowEditing'] = true;
            gridObj.setCellText(rowIndex, qty_required_cellIndex, qty_required.toFixed(1));
            gridObj.model.columns[15]['allowEditing'] = false;

        }
         
    }

    function savess() {
        var datepickObj = $("#DatePrepared").data('ejDatePicker');
        var dp = datepickObj.option('value');

        var st = $("#StartDate").data('ejDatePicker');
        var sd = st.option('value');//StartDate

        var et = $("#EndDate").data('ejDatePicker');
        var ed = et.option('value');//StartDate

        if (dp == null || sd == null || ed == null) {
            alert('Please fill in the missing Information, Date Prepared is Missing !..');
        }
        else {

            if (document.getElementById('FinalSubmission').checked) {
                $('#FinalSubmission').val(true);
            } else {
                $('#FinalSubmission').val(false);
            }
            if (document.getElementById('EmergencyOrder').checked) {
                $('#EmergencyOrder').val(true);
            } else {
                $('#EmergencyOrder').val(false);
            }
            var obj = $("#Grid").ejGrid("instance");
            obj.endEdit();
            var grd_order = $("#order_grid").ejGrid("instance");
            var grd_patient = $("#patient_grid").ejGrid("instance");
            var grd_patient_paed = $("#patient_paediatric_grid").ejGrid("instance");
            var grd_patient_other = $("#patient_other_grid").ejGrid("instance");
            var grd_regimen_extra = $("#extra_regimen_grid").ejGrid("instance");
            var grd_regimen_extra_paed = $("#extra_regimen_paediatric_grid").ejGrid("instance");
            grd_order.batchSave();
            grd_patient.batchSave();
            grd_patient_paed.batchSave();
            grd_patient_other.batchSave();
            grd_regimen_extra.batchSave();
            grd_regimen_extra_paed.batchSave();
            window._Event = "Saved";
            cancelss1();
        }
    }
    function cancelss1() {
        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
    }
    function cancelss() {
        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
        window._Event = "add";
        cancelSave();
    }
</script>
<style>
    .customCSS.e-rowcell {
        background-color: #EFF5FB;
        font-family: 'Bell MT';
        font-style: italic;
        /*color: whitesmoke;*/
        font-size: 20px;
    }
</style>