
@{
    ViewBag.Title = "AddEdit";
    Layout = "~/Views/Shared/_LayoutHSIP.cshtml";
}
@section BreadCrumb{ 
<div class="row"> 
    <div class="col-lg-12">
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("Home", "IndexHSIP", "Home")
            </li>
            <li class="active">
                <strong>ART: HSIP Routine Orders</strong>
            </li>
        </ol>
    </div>
</div>

   }
@(Html.EJ().Grid<object>
        ("Grid")
        .Datasource(datasource => datasource.URL("DataSourceHSIPOrders").UpdateURL("DialogUpdate").InsertURL("DialogInsertHSIP").Adaptor(AdaptorType.UrlAdaptor))
        .AllowPaging()
        .AllowFiltering()
        .AllowTextWrap()
        .AllowGrouping()

        //.AllowScrolling()
        //.ScrollSettings(scroll =>
        //{
        //    scroll.AllowVirtualScrolling().Height(500).Width(0).
        //    VirtualScrollMode(VirtualScrollMode.Normal);
        //})
        .AllowKeyboardNavigation(true)
        .GroupSettings(group => { group.ShowGroupedColumn(true); })
        .TextWrapSettings(wrap => { wrap.WrapMode(WrapMode.Both); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        //.AllowSearching().SearchSettings(search =>
        //{
        //    search.Fields(fields =>
        //    {
        //        //fields.Add("Outcome");
        //        //fields.Add("Output");
        //        //fields.Add("Indicator");
        //        //fields.Add("Indicator_2");
        //        //fields.Add("PerformanceTargetNotes");
        //        //fields.Add("ExplanatoryNotes");
        //    });
        //    search.Operator(Operator.Contains);
        //    search.IgnoreCase(true);
        //})
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.DialogTemplate).DialogEditorTemplateID("#template"); })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    //items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                    items.AddTool(ToolBarItems.Update);
                    items.AddTool(ToolBarItems.Cancel);
                    items.AddTool(ToolBarItems.Search);
                });
            })
        .Columns(col =>
        {
            col.Field("OrderNumber").AllowEditing(false).HeaderText("Order Number").IsPrimaryKey(true).Add();
            col.Field("FacilityCode").AllowEditing(false).HeaderText("Facility").ForeignKeyField("FacilityCode").ForeignKeyValue("Facility").DataSource((IEnumerable<Object>)ViewBag.FacilityDataSource).Add();
            col.Field("StartDate").AllowEditing(false).HeaderText("Start of reporting period").Format("{0:dd/MM/yyyy}").Add();
            col.Field("EndDate").AllowEditing(false).HeaderText("End of reporting period").Format("{0:dd/MM/yyyy}").Add();
            col.Field("DatePrepared").AllowEditing(false).HeaderText("Date prepared").Format("{0:dd/MM/yyyy}").Add();
            col.Field("OrderStatusId").AllowEditing(false).HeaderText("Order Status").ForeignKeyField("StatusId").ForeignKeyValue("Status").DataSource((IEnumerable<Object>)ViewBag.OrderStatusDataSource).Add();
           // col.Field("RFSO_SentBackTofacility").AllowEditing(false).HeaderText("Sent Back To Facility").Add();

        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete"); })
)

<script type="text/template" id="template">
   
    <div class="row">
        <div class="col-lg-3">
            <p>Facility</p>
            <p><input type="text" id="FacilityCode" name="FacilityCode" value="{{:FacilityCode}}" class="e-field e-ejinputtext valid" /></p>
            <p>Date Submitted</p>
            <p><input type="text" id="DatePrepared" name="DatePrepared" value="{{:DatePrepared}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        <div class="col-lg-3">
            <p>Start Of Reporting Period</p>
            <p><input type="text" id="StartDate" name="StartDate" value="{{:StartDate}}" class="e-field e-ejinputtext valid" /></p>
            <p>End Of Reporting Period</p>
            <p><input type="text" id="EndDate" name="EndDate" value="{{:EndDate}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        <div class="col-lg-3">
            <p>Order Status</p>
            <p><input type="text" id="OrderStatusId" name="OrderStatusId" value="{{:OrderStatusId}}" class="e-field e-ejinputtext valid" /></p>
            <p>Order Number</p>
            <p><input type="text" id="OrderNumber" readonly name="OrderNumber" value="{{:OrderNumber}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        @*<div class="col-lg-3">
            <div>
                <table>
                    <tr>
                        <td class="btn btn-danger btn-sm" align="left" style="font-size:medium">   Send report back to Facility ? </td>
                        <td style="transform:scale(2)">
                            {{if RFSO_SentBackTofacility}}
                            <input type="checkbox" id="RFSO_SentBackTofacility" checked="checked" name="RFSO_SentBackTofacility" class="e-field e-checkbox  " style="width:30px" />
                            {{else}}
                            <input type="checkbox" id="RFSO_SentBackTofacility" name="RFSO_SentBackTofacility" class="e-field e-checkbox " style="width:30px" />
                            {{/if}}
                        </td>
                    </tr>
                </table>
            </div>
        </div>*@
    </div>
  
   
            <hr />
            <div id="defaultTab" style="width: 100%;">
                <ul>
                    <li><a href="#tab1">ORDERS</a></li>
                    <li><a href="#tab2">ADULT PATIENTS</a></li>
                    <li><a href="#tab3">PAEDIATRIC PATIENTS</a></li>
                    <li><a href="#tab4">OTHER PATIENTS</a></li>
                    <li><a href="#tab5">EXTRA PATIENT REGIMENS (ADULT)</a></li>
                    <li><a href="#tab6">EXTRA PATIENT REGIMENS (PAEDIATRIC)</a></li>
                </ul>

                <div id="tab1">
                    <div class="myDiv">
                    </div>
                    <div>
                        <div id="order_grid"></div>
                    </div>
                </div>
                <div id="tab2">
                    <div class="myDiv">
                    </div>
                    <div>
                        <div id="patient_grid"></div>
                    </div>
                </div>
                <div id="tab3">
                    <div class="myDiv">
                    </div>
                    <div>
                        <div id="patient_paediatric_grid"></div>
                    </div>
                </div>
                <div id="tab4">
                    <div class="myDiv">
                    </div>
                    <div>
                        <div id="patient_other_grid"></div>
                    </div>
                </div>
                <div id="tab5">
                    <div class="myDiv">
                    </div>
                    <div>
                        <div id="extra_regimen_grid"></div>
                    </div>
                </div>
                <div id="tab6">
                    <div class="myDiv">
                    </div>
                    <div>
                        <div id="extra_regimen_paediatric_grid"></div>
                    </div>
                </div>
            </div>
            <br />
</script>
<script>
    function complete(args) {
       
        if ((args.requestType == "beginedit" || args.requestType == "add") && args.model.editSettings.editMode == "dialogtemplate") {
            $('#' + this._id + '_dialogEdit').ejDialog("option", "title", "ART ORDER TEMPLATE"); //change dialog title
            $("#StartDate").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy"}
                );
            $("#EndDate").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy"}
            );    
            $("#DatePrepared").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy" }
            );  
            $.ajax({
                //url: 'HAT/Districts',
                url: 'GetFacilityData',
                //data: JSON.stringify(mid),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                type: 'GET',
                success: function (data) {
                    if (data.length > 0) {
                        var DropDownListDist = $('#FacilityCode').ejDropDownList({
                            dataSource: data,
                            width: "240px",
                            fields: { value: "FacilityCode", text: "Facility" },
                        }).data("ejDropDownList");
                        //var ddl2 = $('#FacilityCode').ejDropDownList("instance");
                        //var fc = data[0].FacilityCode;
                        //console.log(JSON.stringify(fc));
                        //ddl2.selectItemByValue(fc);
                    }

                },

            });
            $.ajax({
                //url: 'HAT/Districts',
                url: 'GetOrderStatusData',
                //data: JSON.stringify(mid),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                type: 'GET',
                success: function (data) {
                    if (data.length > 0) {
                        var DropDownListDist = $('#OrderStatusId').ejDropDownList({
                            dataSource: data,
                            width: "240px",
                            fields: { value: "StatusId", text: "Status" },
                        }).data("ejDropDownList");
                    }
                },
            });
            $("#defaultTab").ejTab({ selectedItemIndex: 0 }).ejTab({ showRoundedCorner: true });
            
            if (args.requestType == "beginedit" || args.requestType == "add") {

                $("#EditDialog_Grid_Save").ejButton("destroy");
                $($("#EditDialog_Grid_Save").hide()).after('<button id="save" type="button" onclick="savess();" class="btn btn-success btn-sm" > <span class="glyphicon glyphicon-save"></span> Save</button>');
                $("#save").css({ "width": "100px", "height": "50px", "font-size": "17px", "margin-left": "190px" });
                $("#EditDialog_Grid_Cancel").ejButton("destroy");
                $($("#EditDialog_Grid_Cancel").hide()).after(' <button type="button" id="cancel" onclick="cancelss()" class="btn btn-danger btn-sm" ><span class="glyphicon glyphicon-remove-circle"></span> Cancel</button>');
                $("#cancel").css({ "width": "100px", "height": "50px", "margin-left": "10px" })


                var header_grid = $('#Grid').ejGrid('instance');
              
                if (args.requestType == "beginedit") { 
                    var order_no = header_grid.getSelectedRecords()[0].OrderNumber;
                }
                if (args.requestType == "add") 
                { 
                    var order_no = "new_record";
                }

                $("#order_grid").ejGrid({
                    dataSource: ej.DataManager({ url: "GetOrder", batchUrl: "Update", adaptor: "UrlAdaptor" }),
                    query: new ej.Query().addParams('param_on', order_no),
                    allowGrouping: false,

                    //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                    //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                    editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                    allowScrolling: true,
                    scrollSettings: { width: "100%", height: "auto" },
                    allowPaging: false,
                    enableAltRow: true,
                    allowTextWrap: true,
                    textWrapSettings: { wrapMode: "both" },
                    cellEdit: "cellEdit",
                    allowResizeToFit: true,
                    showStackedHeader: true,
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowScrolling: true,
                    queryCellInfo: "queryCellInfo",
                    cellSave: "cellsave",
                    allowKeyBoardNavigation: true,
                    //cellEdit: "cellEdit",
                    columns: [
                        { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                        { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: false },
                        { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: false },
                        { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: false },
                        { field: "product_code", headerText: "Product Code", allowEditing: true, width: 70, isPrimaryKey: true },
                        { field: "product_description", headerText: "Product Description", allowEditing: false, width: 400 },
                        { field: "Basic_Unit", headerText: "Basic Unit", allowEditing: false, width: 80 },
                        { field: "OpeningBalance", headerText: "Opening Balance", allowEditing: false, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                        { field: "QuantityRecieved", headerText: "Quantity Received", allowEditing: false, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "ART_eMTCT_Consumption", headerText: "ART & e-MTCT Consumption", width: 80, allowEditing: false, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Losses_Adjustments", headerText: "Losses / Adjustments", width: 80, allowEditing: false, editType: ej.Grid.EditingType.Numeric },
                        { field: "DaysOutOfStockDuring2Months", headerText: "Days Out of Stock During 2 Month Cycle", allowEditing: false, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "AdjustedAMC", headerText: "Adjusted AMC", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS", editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0, decimalPlaces: 1 }},//DecimalPlaces = 3
                        { field: "ClosingBalance", headerText: "Closing Balance", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                        { field: "Months_Stock_atHand", headerText: "Months Of Stock At Hand", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                        { field: "Quantity_Required_Current_Patients", headerText: "Quantity Required For Current Patients", allowEditing: false, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                        { field: "Quantity_Allocated", headerText: "Quantity Allocated", allowEditing: true, width: 80, textAlign: ej.TextAlign.Center, cssClass: "customCSS", editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Notes", headerText: "Notes", width: 200, allowEditing: false },
                        { field: "RFSONotes", headerText: "RFSO Notes", width: 200, allowEditing: false }
                    ]
                });

                $("#patient_grid").ejGrid({
                    dataSource: ej.DataManager({ url: "GetOrderPatients", batchUrl: "UpdatePatients", adaptor: "UrlAdaptor" }),
                    query: new ej.Query().addParams('param_on', order_no),
                    //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                    //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                    allowGrouping: false,
                    //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                    //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                    editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                    allowScrolling: true,
                    scrollSettings: { width: "100%", height: "auto" },
                    allowPaging: false,
                    enableAltRow: true,
                    allowTextWrap: true,
                    textWrapSettings: { wrapMode: "both" },
                    cellEdit: "cellEditRC",
                    allowResizeToFit: true,
                    showStackedHeader: true,
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowScrolling: true,
                    queryCellInfo: "queryCellInfoPatients",
                    //showSummary: true,
                    //summaryRows: [{
                    //    title: "Sum",
                    //    summaryColumns: [{
                    //        summaryType: ej.Grid.SummaryType.Sum,
                    //        displayColumn: "No_Existing",
                    //        dataMember: "No_Existing"
                    //    }]
                    //}],
                    columns: [
                        { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                        { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                        { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                        { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                        { field: "regimen_code", visible: false, headerText: "Regimen Code", allowEditing: false, width: 70, isPrimaryKey: true },
                        { field: "regimen", headerText: "Regimen", allowEditing: false, width: 400 },
                        { field: "No_Existing", headerText: "No. Existing", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "No_New", headerText: "No. New", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        //{ field: "Pregnant_Existing", headerText: "Pregnant Existing", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        //{ field: "Pregnant_New", headerText: "Pregnant New", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                    ]
                });

                $("#patient_paediatric_grid").ejGrid({
                    dataSource: ej.DataManager({ url: "GetOrderPatientsPaediatric", batchUrl: "UpdatePatientsPaediatric", adaptor: "UrlAdaptor" }),
                    query: new ej.Query().addParams('param_on', order_no),
                    //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                    //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                    allowGrouping: false,
                    //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                    //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                    editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                    allowScrolling: true,
                    scrollSettings: { width: "100%", height: "auto" },
                    allowPaging: false,
                    enableAltRow: true,
                    allowTextWrap: true,
                    textWrapSettings: { wrapMode: "both" },
                    cellEdit: "cellEditRC",
                    allowResizeToFit: true,
                    showStackedHeader: true,
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowScrolling: true,
                    queryCellInfo: "queryCellInfoPatients",
                    columns: [
                        { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                        { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                        { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                        { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                        { field: "regimen_code", visible: false, headerText: "Regimen Code", allowEditing: true, width: 70, isPrimaryKey: true },
                        { field: "regimen", headerText: "Regimen", allowEditing: false, width: 400 },
                        { field: "Existing_0_3Yrs", headerText: "Existing 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "New_0_3Yrs", headerText: "New 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Existing_3_10Yrs", headerText: "Existing 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "New_3_10Yrs", headerText: "New 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Existing_10_15Yrs_Less35Kg", headerText: "Existing 10<15Yrs Less 35Kg", width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "New_10_15Yrs_Less35Kg", headerText: "New 10<15Yrs Less 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Existing_10_15Yrs_Greater35Kg", headerText: "Existing 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "New_10_15Yrs_Greater35Kg", headerText: "New 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                    ]
                });

                $("#patient_other_grid").ejGrid({
                    dataSource: ej.DataManager({ url: "GetOrderPatientsOther", batchUrl: "UpdatePatientsOther", adaptor: "UrlAdaptor" }),
                    query: new ej.Query().addParams('param_on', order_no),
                    //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                    //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                    allowGrouping: false,
                    //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                    //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                    editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                    allowScrolling: true,
                    scrollSettings: { width: "100%", height: "auto" },
                    allowPaging: false,
                    enableAltRow: true,
                    allowTextWrap: true,
                    textWrapSettings: { wrapMode: "both" },
                    cellEdit: "cellEditRC",
                    allowResizeToFit: true,
                    showStackedHeader: true,
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowScrolling: true,
                    queryCellInfo: "queryCellInfoPatients",
                    columns: [
                        { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                        { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                        { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                        { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                        { field: "regimen_code", visible: false, headerText: "Regimen Code", allowEditing: true, width: 70, isPrimaryKey: true },
                        { field: "regimen", headerText: "Regimen", allowEditing: false, width: 400 },
                        { field: "Adult", headerText: "Adults", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Child", headerText: "Children", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                    ]
                });

                $("#extra_regimen_grid").ejGrid({
                    dataSource: ej.DataManager({ url: "GetOrderPatientsExtraRegimen", batchUrl: "UpdatePatientsExtraRegimen", adaptor: "UrlAdaptor" }),
                    query: new ej.Query().addParams('param_on', order_no),
                    //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                    //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                    allowGrouping: false,
                    //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                    //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                    editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                    allowScrolling: true,
                    scrollSettings: { width: "100%", height: "auto" },
                    allowPaging: false,
                    enableAltRow: true,
                    allowTextWrap: true,
                    textWrapSettings: { wrapMode: "both" },
                    cellEdit: "cellEditExtraRC",
                    allowResizeToFit: true,
                    showStackedHeader: true,
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowScrolling: true,
                    columns: [
                        { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                        { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                        { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                        { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                        { field: "RegimenCode", visible: false, headerText: "Regimen Code", allowEditing: false, width: 70, isPrimaryKey: true },
                        { field: "RegimenDesc", headerText: "Regimen", allowEditing: false, width: 200 },
                        { field: "Patients_Existing", headerText: "Existing Patients", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Patients_New", headerText: "New Patients", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                    ]
                });

                $("#extra_regimen_paediatric_grid").ejGrid({
                    dataSource: ej.DataManager({ url: "GetOrderPaediatricExtraRegimen", batchUrl: "UpdatePaediatricExtraRegimen", adaptor: "UrlAdaptor" }),
                    query: new ej.Query().addParams('param_on', order_no),
                    //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                    //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                    allowGrouping: false,
                    //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                    //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                    editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                    allowScrolling: true,
                    scrollSettings: { width: "100%", height: "auto" },
                    allowPaging: false,
                    enableAltRow: true,
                    allowTextWrap: true,
                    textWrapSettings: { wrapMode: "both" },
                    cellEdit: "cellEditExtraRC",
                    allowResizeToFit: true,
                    showStackedHeader: true,
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowScrolling: true,
                    queryCellInfo: "queryCellInfoPatients",
                    columns: [
                        { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                        { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: true },
                        { field: "StartDate", headerText: "StartDate", visible: false, allowEditing: true },
                        { field: "EndDate", headerText: "EndDate", visible: false, allowEditing: true },
                        { field: "RegimenCode", visible: false, headerText: "Regimen Code", allowEditing: false, width: 70, isPrimaryKey: true },
                        { field: "RegimenDesc", headerText: "Regimen", allowEditing: false, width: 400 },
                        { field: "Existing_0_3Yrs", headerText: "Existing 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "New_0_3Yrs", headerText: "New 0<3Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Existing_3_10Yrs", headerText: "Existing 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "New_3_10Yrs", headerText: "New 3<10Yrs", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Existing_10_15Yrs_Less35Kg", headerText: "Existing 10<15Yrs Less 35Kg", width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "New_10_15Yrs_Less35Kg", headerText: "New 10<15Yrs Less 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "Existing_10_15Yrs_Greater35Kg", headerText: "Existing 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } },
                        { field: "New_10_15Yrs_Greater35Kg", headerText: "New 10<15Yrs Greater 35Kg", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 } }
                    ]
                });

                var nullstr = '';
            }
        }
    }


    function queryCellInfo(args) {
        if (args.column.field == "product_code" && args.data.product_code == null)
            $($(args.cell).parent()).css("backgroundColor", "steelblue").css("color", "white");/*custom css applied to the row */
    }

    function queryCellInfoPatients(args) {
        if (args.column.field == "regimen_code" && args.data.regimen_code == null)
            $($(args.cell).parent()).css("backgroundColor", "steelblue").css("color", "white");/*custom css applied to the row */
    }

    function cellEdit(args) {
        var pc = args.model.selectedRecords[0].product_code;
        if (pc == null) {
            args.cancel = true;
        }

    }

    function cellEditRC(args) {
        var rc = args.model.selectedRecords[0].regimen_code;
        if (rc == null) {
            args.cancel = true;
        }
    }
    //RegimenCode
    function cellEditExtraRC(args) {
        var rc = args.model.selectedRecords[0].RegimenCode;
        if (rc == null) {
            args.cancel = true;
        }
    }
</script>


<script type="text/javascript">
    
    function cellsave(args) {

        var gridObj = $("#order_grid").data("ejGrid");
        var rowIndex = gridObj.selectedRowsIndexes;
        var amc_cellIndex = 12;
        var MonthsOfStock_cellIndex = 14;
        var qty_required_cellIndex = 15;

        if (args.columnName == "DaysOutOfStockDuring2Months") {
            //amc
            var daysOutStock = args.value;
            var consumption = args.rowData.ART_eMTCT_Consumption;
            //var max_stock = (consumption * 2);
            var amc = (consumption * 30) / (60 - daysOutStock);
            gridObj.model.columns[12]['allowEditing'] = true;
            gridObj.setCellText(rowIndex, amc_cellIndex, amc.toFixed(1));
            gridObj.model.columns[12]['allowEditing'] = false;

            //quantity required
            //var consumption = args.value;
            var tests_remaining = args.rowData.ClosingBalance;
            var month_stock = tests_remaining / amc;
            gridObj.model.columns[14]['allowEditing'] = true;
            gridObj.setCellText(rowIndex, MonthsOfStock_cellIndex, month_stock.toFixed(1));
            gridObj.model.columns[14]['allowEditing'] = false;

            //quantity required
            var qty_required = (4 * amc) - tests_remaining;
            gridObj.model.columns[15]['allowEditing'] = true;
            gridObj.setCellText(rowIndex, qty_required_cellIndex, qty_required.toFixed(1));
            gridObj.model.columns[15]['allowEditing'] = false;

        }

    }
    function savess() {
        var datepickObj = $("#DatePrepared").data('ejDatePicker');
        var dp = datepickObj.option('value');

        var st = $("#StartDate").data('ejDatePicker');
        var sd = st.option('value');//StartDate

        var et = $("#EndDate").data('ejDatePicker');
        var ed = et.option('value');//StartDate

        if (dp == null || sd == null || ed == null) {
            alert('Please fill in the missing Information, Date Prepared is Missing !..');
        }
        else {

            var obj = $("#Grid").ejGrid("instance");
            obj.endEdit();
            var grd_order = $("#order_grid").ejGrid("instance");
            var grd_patient = $("#patient_grid").ejGrid("instance");
            var grd_patient_paed = $("#patient_paediatric_grid").ejGrid("instance");
            var grd_patient_other = $("#patient_other_grid").ejGrid("instance");
            var grd_regimen_extra = $("#extra_regimen_grid").ejGrid("instance");
            var grd_regimen_extra_paed = $("#extra_regimen_paediatric_grid").ejGrid("instance");


            grd_order.batchSave();
            grd_patient.batchSave();
            grd_patient_paed.batchSave();
            grd_patient_other.batchSave();
            grd_regimen_extra.batchSave();
            grd_regimen_extra_paed.batchSave();
        }
    }
    function cancelss() {
        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
    }
</script>
<style>
    .customCSS.e-rowcell {
        background-color: #EFF5FB;
        font-family: 'Bell MT';
        font-style: italic;
        /*color: whitesmoke;*/
        font-size: 20px;
    }
</style>
