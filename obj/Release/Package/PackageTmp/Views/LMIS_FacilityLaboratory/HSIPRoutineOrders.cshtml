
@{
    ViewBag.Title = "AddEdit";
    Layout = "~/Views/Shared/_LayoutFacilityHSIP.cshtml";
}

@section BreadCrumb{
    <div class="row">
        <div class="col-lg-12">
            <ol class="breadcrumb">
                <li>
                    @Html.ActionLink("Home", "IndexFacilityHSIP", "Home")
                </li>
                <li class="active">
                    <strong>Laboratory: HSIP Routine Order</strong>
                </li>
            </ol>
        </div>
    </div>

}
@(Html.EJ().Grid<object>
        ("Grid")
        .Datasource(datasource => datasource.URL("DataSourceHSIPOrders").UpdateURL("DialogUpdateHSIP").InsertURL("DialogInsertHSIP").Adaptor(AdaptorType.UrlAdaptor))
        .AllowPaging()
        .AllowFiltering()
        .AllowTextWrap()
        .AllowGrouping()

        //.AllowScrolling()
        //.ScrollSettings(scroll =>
        //{
        //    scroll.AllowVirtualScrolling().Height(500).Width(0).
        //    VirtualScrollMode(VirtualScrollMode.Normal);
        //})
        .AllowKeyboardNavigation(true)
        .GroupSettings(group => { group.ShowGroupedColumn(true); })
        .TextWrapSettings(wrap => { wrap.WrapMode(WrapMode.Both); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        //.AllowSearching().SearchSettings(search =>
        //{
        //    search.Fields(fields =>
        //    {
        //        //fields.Add("Outcome");
        //        //fields.Add("Output");
        //        //fields.Add("Indicator");
        //        //fields.Add("Indicator_2");
        //        //fields.Add("PerformanceTargetNotes");
        //        //fields.Add("ExplanatoryNotes");
        //    });
        //    search.Operator(Operator.Contains);
        //    search.IgnoreCase(true);
        //})
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.DialogTemplate).DialogEditorTemplateID("#template"); })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    items.AddTool(ToolBarItems.Add);
                    items.AddTool(ToolBarItems.Edit);
                    items.AddTool(ToolBarItems.Update);
                    items.AddTool(ToolBarItems.Cancel);
                    //items.AddTool(ToolBarItems.Search);
                });
            })
        .Columns(col =>
        {
            col.Field("OrderNumber").AllowEditing(false).HeaderText("Order Number").IsPrimaryKey(true).Add();
            col.Field("FacilityCode").AllowEditing(false).HeaderText("Facility").IsPrimaryKey(true).ForeignKeyField("FacilityCode").ForeignKeyValue("Facility").DataSource((IEnumerable<Object>)ViewBag.FacilityDataSource).Add();
            col.Field("start_date").AllowEditing(false).HeaderText("Start of reporting period").IsPrimaryKey(true).Format("{0:dd/MM/yyyy}").Add();
            col.Field("end_date").AllowEditing(false).HeaderText("End of reporting period").IsPrimaryKey(true).Format("{0:dd/MM/yyyy}").Add();
            col.Field("date_completed").AllowEditing(false).HeaderText("Date prepared").Format("{0:dd/MM/yyyy}").Add();
            col.Field("FinalSubmission").EditType(EditingType.BooleanEdit).AllowEditing(true).HeaderText("Final Submission").Add();
            col.Field("RFSO_SentBackTofacility").EditType(EditingType.BooleanEdit).AllowEditing(false).HeaderText("Order Sent Back").Add();
            col.Field("EditedBy").HeaderText("Modified by").IsPrimaryKey(true).TextAlign(TextAlign.Right).Add();
            col.Field("EditedDate").HeaderText("Date modified").Format("{0:dd/MM/yyyy}").Add();
        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete"); })
)

<script type="text/template" id="template">

    <div class="row">
        @*<div class="col-lg-3">
            <p>District</p>
            <p><input type="text" id="DistrrictCode" name="DistrrictCode" value="{{:DistrrictCode}}" class="e-field e-ejinputtext valid" /></p>
            <p>Facility</p>
            <p><input type="text" id="FacilityCode" name="FacilityCode" value="{{:FacilityCode}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        <div class="col-lg-3">
            <p>Sector</p>
            <p><input type="text" id="DeliveryZoneCode" name="DeliveryZoneCode" value="{{:DeliveryZoneCode}}" class="e-field e-ejinputtext valid" /></p>
            <p>Date Submitted</p>
            <p><input type="text" id="date_completed" name="date_completed" value="{{:date_completed}}" class="e-field e-ejinputtext valid" /></p>
        </div>*@
        <div class="col-lg-3">
            <p>Facility</p>
            <p><input type="text" id="FacilityCode" name="FacilityCode" value="{{:FacilityCode}}" class="e-field e-ejinputtext valid" /></p>
           
            <p>Date Submitted</p>
            <p><input type="text" id="date_completed" name="date_completed" value="{{:date_completed}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        <div class="col-lg-3">
            <p>Start Of Reporting Period</p>
            <p><input type="text" id="start_date" name="start_date" value="{{:start_date}}" class="e-field e-ejinputtext valid" /></p>
            <p>End Of Reporting Period</p>
            <p><input type="text" id="end_date" name="end_date" value="{{:end_date}}" class="e-field e-ejinputtext valid" /></p>
        </div>
        <div class="col-lg-3">
            <p>Order Number</p>
            <p><input type="text" id="OrderNumber" readonly name="OrderNumber" value="{{:OrderNumber}}" class="e-field e-ejinputtext valid" /></p>
            <div>
                @*<table>
                    <tr>
                        <td class="btn btn-danger btn-sm" align="left" style="font-size:medium">  Final Submission ? </td>
                        <td style="transform:scale(2)">
                        <td class="checkbox">
                            <input type="checkbox" id="FinalSubmissionYes" value="Yes" /> <label for="FinalSubmissionYes">Yes:</label>
                        </td>
                        <td class="checkbox">
                            <input type="checkbox" id="FinalSubmissionNo" value="No" /> <label for="FinalSubmissionNo">No:</label>
                        </td>
                            
                     
                    </tr>
                </table>*@
                <table>
                    <tr>
                        <td class="btn btn-danger btn-sm" align="left" style="font-size:medium">  Final Submission ? </td>
                        <td style="transform:scale(2)">
                            {{if FinalSubmission}}
                            <input type="checkbox" id="FinalSubmission" checked="checked" name="FinalSubmission" class="e-field e-checkbox  " style="width:30px" />
                            {{else}}
                            <input type="checkbox" id="FinalSubmission" name="FinalSubmission" class="e-field e-checkbox " style="width:30px" />
                            {{/if}}
                        </td>
                        
                    </tr>
                </table>
            </div> 
        </div>
    </div>
    <hr />
    <div id="order_grid"></div>
    <br />
</script>

<script>
    function complete(args) {
        if ((args.requestType == "beginedit" || args.requestType == "add") && args.model.editSettings.editMode == "dialogtemplate") {
            $('#' + this._id + '_dialogEdit').ejDialog("option", "title", "Laboratory HSIP Routine Order"); //change dialog title
            $("#start_date").attr("readonly", "readonly");
            $("#end_date").attr("readonly", "readonly");
            $("#start_date").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy" }
            );
            $("#end_date").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy" }
            );
            $("#date_completed").ejDatePicker(
                {
                    width: '240px',
                    dateFormat: "dd/MM/yyyy" }
            );

            //$("#FinalSubmissionNo").ejCheckBox({ size: "medium", checked: true });
            //$("#FinalSubmissionYes").ejCheckBox({ size: "medium" });
            //var checkno = $("#FinalSubmissionNo").data("ejCheckBox");
            //checkno.enable(); // enables the CheckBox
            ////alert(checkno);
            //var checkyes = $("#FinalSubmissionYes").data("ejCheckBox");
            //checkyes.enable();
           // alert(checkyes);
            //$(document).ready(function () {
            //    var checkedItem = [];
            //    $("input[type=checkbox]").each(function () {
            //        if ($("#" + $(this)[0].id).ejCheckBox("option", "checked"))
            //            checkedItem.push($(this).val());
            //    }); alert(checkedItem);
            //});
             
           
            $("#defaultTab").ejTab({ selectedItemIndex: 0 }).ejTab({ showRoundedCorner: true });;

            if (args.requestType == "beginedit" || args.requestType == "add") {

                var myCond = false;
                $.ajax({
                    //url: 'HAT/Districts',
                    url: 'GetFacilityData',
                    //data: JSON.stringify(mid),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    type: 'GET',
                    success: function (data) {
                        if (data.length > 0) {
                            var DropDownListDist = $('#FacilityCode').ejDropDownList({
                                dataSource: data,
                                width: "240px",
                                fields: { value: "FacilityCode", text: "Facility" },
                                //change: 'change',
                            }).data("ejDropDownList");
                            var ddl2 = $('#FacilityCode').ejDropDownList("instance");
                            var fc = data[0].FacilityCode;
                            console.log(JSON.stringify(fc));
                            ddl2.selectItemByValue(fc);

                            if (fc == null) {
                                alert('');
                            }
                            else {
                                //getFacilitySector( int facilitycode)
                                $.ajax({
                                    url: 'getFacilitySector?facilitycode=' + fc,

                                    //data: JSON.stringify(mid),
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    type: 'GET',
                                    success: function (fzone) {
                                        if (fzone != null) {

                                            var today = new Date();
                                            var daytoday = today.getDate();
                                            var todaymonth = today.getMonth();
                                            todaymonth++;
                                            //alert('Zone: ' + fzone + ' daytoday: ' + daytoday + ' todaymonth: ' + todaymonth);
                                            //if (daytoday >= 17 && daytoday < 25) {
                                            //    alert('Dear Customer, please note that the reporting deadline for this Cycle has expired, kind liaise with regional Officer on how to process your order..!');
                                            //    myCond = false;
                                            //    cancelss();
                                            //}
                                            //else
                                            {
                                                if ((todaymonth % 2) == 1) {
                                                    if (fzone >= 1 && fzone <= 3) {
                                                        // alert('Correct');
                                                        myCond = true;
                                                        details(args);
                                                    }
                                                    else {
                                                        //alert('Wrong Zone ');
                                                        alert('Sector : ' + fzone + '  ' + 'Dear Customer, this is not your reporting period, should you want to place and Emergency order, please go to Custom Orders..!');
                                                        myCond = false;
                                                        cancelss();
                                                    }


                                                }
                                                else {
                                                    if (fzone >= 4 && fzone <= 5) {
                                                        //alert('Correct');
                                                        myCond = true;
                                                        details(args);
                                                    }
                                                    else {
                                                        //alert('Wrong Zone ');
                                                        alert('Sector : ' + fzone + '  ' + 'Dear Customer, this is not your reporting period, should you want to place and Emergency order, please go to Custom Orders..!');
                                                        myCond = false;
                                                        cancelss();
                                                    }

                                                }
                                            }

                                        }
                                    },
                                });
                            }
                        }
                    },
                });
            }
        }
    }

    function details(args)
    {
        $("#EditDialog_Grid_Save").ejButton("destroy");
        $($("#EditDialog_Grid_Save").hide()).after('<button id="save" type="button" onclick="savess();" class="btn btn-success btn-sm" > <span class="glyphicon glyphicon-save"></span> Save</button>');
        $("#save").css({ "width": "100px", "height": "50px", "font-size": "17px", "margin-left": "190px" });
        $("#EditDialog_Grid_Cancel").ejButton("destroy");
        $($("#EditDialog_Grid_Cancel").hide()).after(' <button type="button" id="cancel" onclick="cancelss()" class="btn btn-danger btn-sm" ><span class="glyphicon glyphicon-remove-circle"></span> Cancel</button>');
        $("#cancel").css({ "width": "100px", "height": "50px", "margin-left": "10px" })

        var header_grid = $('#Grid').ejGrid('instance');

        if (args.requestType == "beginedit") {
            var order_no = header_grid.getSelectedRecords()[0].OrderNumber;
            $("#order_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrder", batchUrl: "Update", adaptor: "UrlAdaptor" }),
                query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,

                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEdit",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                queryCellInfo: "queryCellInfo",
                cellSave: "cellsave",
                //cellEdit: "cellEdit",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: false },
                    { field: "start_date", headerText: "StartDate", visible: false, allowEditing: false },
                    { field: "end_date", headerText: "EndDate", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "product_code", headerText: "Product Code", allowEditing: false, width: 70, isPrimaryKey: true },
                    { field: "product_description", headerText: "Product Description", allowEditing: false, width: 400 },
                    { field: "Basic_Unit", headerText: "Basic Unit", allowEditing: false, width: 80 },
                    { field: "opening_balance", headerText: "Opening Balance", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                    { field: "quantity_recieved", headerText: "Quantity Received", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }},
                    { field: "consumption", headerText: "Consumption", width: 80, allowEditing: true, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }},
                    { field: "losses_adjustment", headerText: "Losses / Adjustments", width: 80, allowEditing: true, editType: ej.Grid.EditingType.Numeric, cssClass: "customCSS"},
                    { field: "closing_balance", headerText: "Closing Balance", textAlign: ej.TextAlign.Center, allowEditing: false, width: 80, cssClass: "customCSS"},
                    { field: "quantity_to_order", headerText: "Quantity To Order", allowEditing: false, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }},
                    //{ field: "quantity_allocated", headerText: "Quantity Allocated", allowEditing: true, width: 80 },
                    { field: "comments", headerText: "Notes", width: 200, allowEditing: true },
                    { field: "RFSONotes", headerText: "RFSO Notes", width: 200, allowEditing: false }

                ]
            });
        }

        if (args.requestType == "add") {
            var order_no = "new_record";


            var today = new Date();
            var daytoday = today.getDate();
            var todaymonth = today.getMonth();

            var myyear = today.getFullYear();

            ////Manually create a date to introduce '0' in months before Oct and days beo
            //var my_date = (daytoday + '/' + todaymonth + '/' + myyear);
            // alert()

            var stDate = (daytoday + '/' + todaymonth + '/' + myyear);
            var enDate = (daytoday + '/' + todaymonth + '/' + myyear);

            var startDate = new Date(myyear, todaymonth, daytoday);
            var endDate = new Date(myyear, todaymonth, daytoday);
            if (daytoday >= 25) {
                startDate = new Date(myyear, todaymonth - 2, '01');
                var mmstart = todaymonth;

                var mmStr = '';
                if (todaymonth < 10) {
                    mmStr = '0' + mmstart;
                }
                else {
                    mmStr = mmstart;
                }

                //sDate = ('25' + '/' + mmStr + '/' + myyear);
                //  sDate = new Date (myyear, todaymonth, '25');

                stDate = ('25/' + mmStr + '/' + myyear);
                //alert(stDate);

                var twoDigitMonth = ((today.getMonth().length + 1) === 1) ? (today.getMonth() + 1) : '0' + (today.getMonth() + 1);
                var Start_Date = today.getDate() + "/" + twoDigitMonth + "/" + today.getFullYear();
                var End_Date = today.getDate() + "/" + twoDigitMonth + "/" + today.getFullYear();

                var lastday = 31;
                if (todaymonth + 1 == 0 || todaymonth + 1 == 2 || todaymonth + 1 == 4 || todaymonth + 1 == 6 ||
                    todaymonth + 1 == 7 || todaymonth + 1 == 9 || todaymonth + 1 == 11) {
                }
                else {
                    if (todaymonth + 1 == 1) {
                        lastday = 28; // Need to cater for leap year
                    }
                    else {
                        lastday = 30;
                    }
                }
                //if (todaymonth == 11)
                //{
                //    endDate = new Date(++myyear, 0, '05');

                //   // eDate = ('05' + '/' + '01' + '/' + ++myyear);

                //    eDate = new Date(++myyear, '0', '5');


                //    enDate = ('05/01/' + ++myyear);

                //    twoDigitMonth = ((eDate.getMonth().length + 1) === 1) ? (eDate.getMonth() + 1) : '0' + (eDate.getMonth() + 1);

                //    End_Date = eDate.getDate() + "/" + twoDigitMonth + "/" + eDate.getFullYear();

                //}
                //else
                {
                    //endDate = new Date(myyear, todaymonth , lastday);
                    var lastday = 31;
                    if (todaymonth == 0 || todaymonth == 2 || todaymonth == 4 || todaymonth == 6 ||
                        todaymonth == 7
                        || todaymonth == 9 || todaymonth == 11) {
                        endDate = new Date(myyear, todaymonth - 1, lastday);
                    }
                    else {
                        if (todaymonth == 1) {
                            lastday = 28; // Need to cater for leap year
                            endDate = new Date(myyear, todaymonth - 1, lastday);
                        }
                        else {
                            lastday = 30;
                            endDate = new Date(myyear, todaymonth - 1, lastday);
                        }
                    }


                    var mmend = todaymonth + 1;

                    var mmStr = '';
                    if (todaymonth < 10) {
                        mmStr = '0' + mmend;
                    }
                    else {
                        mmStr = mmend;
                    }


                    //eDate = ('05' + '/' + mmStr + '/' + myyear);
                    // eDate = new Date(myyear, mmend, '5'); 

                    enDate = ('05/' + mmStr + '/' + myyear);

                    //twoDigitMonth = ((eDate.getMonth().length + 1) === 1) ? (eDate.getMonth() + 1) : '0' + (eDate.getMonth() + 1);

                    //End_Date = eDate.getDate() + "/" + twoDigitMonth + "/" + eDate.getFullYear();
                }

            }

            else
            /*if (daytoday >= 25)*/ {
                startDate = new Date(myyear, todaymonth - 2, '01');
                var mmstart = todaymonth;

                var mmStr = '';
                if (todaymonth < 10) {
                    mmStr = '0' + mmstart;
                }
                else {
                    mmStr = mmstart;
                }
                stDate = ('25/' + mmStr + '/' + myyear);

                var lastday = 30;
                if (todaymonth == 0 || todaymonth == 2 || todaymonth == 4 || todaymonth == 6 ||
                    todaymonth == 7
                    || todaymonth == 9 || todaymonth == 11) {
                    endDate = new Date(myyear, todaymonth - 1, lastday);
                }
                else {
                    if (todaymonth == 8 || todaymonth == 3 || todaymonth == 5 || todaymonth == 10) {
                        lastday = 31;
                        endDate = new Date(myyear, todaymonth - 1, lastday);
                    }
                    else {
                        lastday = 28;// Need to cater for leap year
                        endDate = new Date(myyear, todaymonth - 1, lastday);
                    }
                }


                var mmend = todaymonth + 1;

                var mmStr = '';
                if (todaymonth < 10) {
                    mmStr = '0' + mmend;
                }
                else {
                    mmStr = mmend;
                }
                enDate = ('05/' + mmStr + '/' + myyear);

                if (todaymonth == 0) {
                    startDate = new Date(--myyear, '11', '01');

                    stDate = ('25/12/' + --myyear);

                }
            }
            // alert('startdate:' + startDate + '\nenddate' + endDate);
            //alert('startdate:' + stDate + '\nenddate' + enDate);
            var testdate = new Date(++myyear, 0, '05');
            var x = $("#end_date").ejDatePicker('instance');
            x.option('value', endDate);//StartDate

            var y = $("#start_date").ejDatePicker('instance');
            y.option('value', startDate);//StartDate
            var FC = "new_record";


            var facCode = $('#FacilityCode').data("ejDropDownList");
            var fcCode = facCode.option("value");


            $("#order_grid").ejGrid({
                dataSource: ej.DataManager({ url: "GetOrder_Lab?FC=" + fcCode + "&StartDate=" + stDate + "&EndDate=" + enDate, batchUrl: "Update", adaptor: "UrlAdaptor" }),

                //query: new ej.Query().addParams('param_on', order_no),
                //.executeQuery(new ej.Query().addParams('param_fc', facility_code).addParams('param_sd', start_date).addParams('param_ed', end_date)),
                //dataSource: ej.DataManager({ url: "BatchDataEdit?facility_code=" + facility_code + "&start_date=" + start_date + "&end_date=" + end_date, batchUrl: "BatchUpdateHeader", adaptor: "UrlAdaptor" }),
                allowGrouping: false,

                //groupSettings: { showDropArea: false, groupedColumns: ["ovc_identification_Desc"], headerText: "" },
                //toolbarSettings: { showToolbar: true, toolbarItems: ['search'] },
                editSettings: { allowDeleting: true, allowEditing: true, allowAdding: true, editMode: 'batch' },
                allowScrolling: true,
                scrollSettings: { width: "100%", height: "auto" },
                allowPaging: false,
                enableAltRow: true,
                allowTextWrap: true,
                textWrapSettings: { wrapMode: "both" },
                cellEdit: "cellEdit",
                allowResizeToFit: true,
                showStackedHeader: true,
                isResponsive: true,
                enableResponsiveRow: true,
                allowScrolling: true,
                queryCellInfo: "queryCellInfo",
                cellSave: "cellsave",
                //cellEdit: "cellEdit",
                columns: [
                    { field: "OrderNumber", headerText: "OrderNumber", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "FacilityCode", headerText: "FacilityCode", visible: false, allowEditing: false },
                    { field: "start_date", headerText: "StartDate", visible: false, allowEditing: false },
                    { field: "end_date", headerText: "EndDate", visible: false, allowEditing: false, isPrimaryKey: true },
                    { field: "product_code", headerText: "Product Code", allowEditing: false, width: 70, isPrimaryKey: true },
                    { field: "product_description", headerText: "Product Description", allowEditing: false, width: 400 },
                    { field: "Basic_Unit", headerText: "Basic Unit", allowEditing: false, width: 80 },
                    { field: "opening_balance", headerText: "Opening Balance", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }, textAlign: ej.TextAlign.Center, cssClass: "customCSS" },
                    { field: "quantity_recieved", headerText: "Quantity Received", allowEditing: true, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }},
                    { field: "consumption", headerText: "Consumption", width: 80, allowEditing: true, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }},
                    { field: "losses_adjustment", headerText: "Losses / Adjustments", width: 80, allowEditing: true, editType: ej.Grid.EditingType.Numeric, cssClass: "customCSS" },
                    { field: "closing_balance", headerText: "Closing Balance", textAlign: ej.TextAlign.Center, allowEditing: false, width: 80, cssClass: "customCSS" },
                    { field: "quantity_to_order", headerText: "Quantity To Order", allowEditing: false, width: 80, editType: ej.Grid.EditingType.Numeric, editParams: { minValue: 0 }},
                    //{ field: "quantity_allocated", headerText: "Quantity Allocated", allowEditing: true, width: 80 },
                    { field: "comments", headerText: "Notes", width: 200, allowEditing: true },
                    { field: "RFSONotes", headerText: "RFSO Notes", width: 200, allowEditing: false }

                ]
            });
        }
       var nullstr = '';
    }
    function queryCellInfo(args) {
        if (args.column.field == "product_code" && args.data.product_code == null)
            $($(args.cell).parent()).css("backgroundColor", "steelblue").css("color", "white");/*custom css applied to the row */
    }
    function cellEdit(args) {
        var pc = args.model.selectedRecords[0].product_code;
        var cb = args.model.selectedRecords[0].closing_balance;
        if (pc == null|| cb==null) {
            args.cancel = true;
        }

    }
</script>

<script type="text/javascript">
    function cellsave(args) {

        var gridObj = $("#order_grid").data("ejGrid");
        var rowIndex = gridObj.selectedRowsIndexes;
        var quantity_to_order_cellIndex = 12;


        if (args.columnName == "consumption") {
            //quantity to order
            var consumption = args.value;
            var closing_balance = args.rowData.closing_balance;
            var quantity = (consumption * 2) - closing_balance;
            gridObj.model.columns[12]['allowEditing'] = true;
            gridObj.setCellText(rowIndex, quantity_to_order_cellIndex, quantity.toFixed(1));
            gridObj.model.columns[12]['allowEditing'] = false;

        }

        //if (args.columnName == "closing_balance") {
        //    //quantity to order
        //    var closing_balance = args.value;
        //    var consumption = args.rowData.consumption;
        //    var quantity = (consumption * 2) - closing_balance;
        //    gridObj.model.columns[11]['allowEditing'] = true;
        //    gridObj.setCellText(rowIndex, quantity_to_order_cellIndex, quantity.toFixed(1));
        //    gridObj.model.columns[11]['allowEditing'] = false;

        //}

    }

    function savess() {
        var datepickObj = $("#date_completed").data('ejDatePicker');
        var dp = datepickObj.option('value');


        var st = $("#start_date").data('ejDatePicker');
        var sd = st.option('value');//StartDate

        var et = $("#end_date").data('ejDatePicker');
        var ed = et.option('value');//StartDate

        if (dp == null || sd == null || ed == null) {
            alert('Please fill in the missing Information, Date Prepared is Missing !..');
        }
        else {
            if (document.getElementById('FinalSubmission').checked) {
                $('#FinalSubmission').val(true);
            } else {
                $('#FinalSubmission').val(false);
            }
            var obj = $("#Grid").ejGrid("instance");
            obj.endEdit();
            var grd_order = $("#order_grid").ejGrid("instance");
            grd_order.batchSave();
        }
       
    }
    function cancelss() {
        var obj = $("#Grid").ejGrid("instance")
        obj.cancelEdit();
    }

</script>
<style>
    .customCSS.e-rowcell {
        background-color: #EFF5FB;
        font-family: 'Bell MT';
        font-style: italic;
        /*color: whitesmoke;*/
        font-size: 20px;
    }
</style>






