
@{
    ViewBag.Title = "SAPExport";
    Layout = "~/Views/Shared/_LayoutMAULT.cshtml";
}
@section BreadCrumb{
    <div class="row">
        <div class="col-lg-12">
            <ol class="breadcrumb">
                <li>
                    @Html.ActionLink("Home", "IndexMAULT", "Home")
                </li>
                <li class="active">
                    <strong>HIV Testkits: SAP Export</strong>
                </li>
            </ol>
        </div>
    </div>

}

@(Html.EJ().Grid<object>
        ("Grid")
        .Datasource(datasource => datasource.URL("GetSAPExport").Adaptor(AdaptorType.UrlAdaptor))
        .AllowPaging()
        .AllowFiltering()
        .AllowTextWrap()
        .AllowGrouping()

        //.AllowScrolling()
        //.ScrollSettings(scroll =>
        //{
        //    scroll.AllowVirtualScrolling().Height(500).Width(0).
        //    VirtualScrollMode(VirtualScrollMode.Normal);
        //})
        .AllowKeyboardNavigation(true)
        .GroupSettings(group => { group.ShowGroupedColumn(true); })
        .TextWrapSettings(wrap => { wrap.WrapMode(WrapMode.Both); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .AllowSearching().SearchSettings(search =>
        {
            search.Fields(fields =>
            {
                //fields.Add("Outcome");
                //fields.Add("Output");
                //fields.Add("Indicator");
                //fields.Add("Indicator_2");
                //fields.Add("PerformanceTargetNotes");
                //fields.Add("ExplanatoryNotes");
            });
            search.Operator(Operator.Contains);
            search.IgnoreCase(true);
        })
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.DialogTemplate).DialogEditorTemplateID("#template"); })
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    //items.AddTool(ToolBarItems.Add);
                    //items.AddTool(ToolBarItems.Edit);
                    //items.AddTool(ToolBarItems.Update);
                    //items.AddTool(ToolBarItems.Cancel);
                    //items.AddTool(ToolBarItems.Search);
                });
            })
        .Columns(col =>
        {
            col.Field("StartDate").AllowEditing(false).Width(100).HeaderText("Start of reporting period").Format("{0:dd/MM/yyyy}").Add();
            col.Field("EndDate").AllowEditing(false).Width(100).HeaderText("End of reporting period").Format("{0:dd/MM/yyyy}").Add();
            col.Field("DatePrepared").AllowEditing(false).Width(100).HeaderText("Date Prepared").Format("{0:dd/MM/yyyy}").Add();
            col.Field("OrderNumber").AllowEditing(false).Width(200).HeaderText("Order No.").IsPrimaryKey(true).Add();
            col.Field("OrderTypeId").AllowEditing(false).Width(150).HeaderText("Order Type").ForeignKeyField("OrderTypeId").ForeignKeyValue("OrderType").DataSource((IEnumerable<object>)ViewBag.OrderTypeDataSource).IsPrimaryKey(true).Width(200).Add();
            col.Field("EmergencyOrder").AllowEditing(false).Width(100).HeaderText("Emergency Order").Add();
            col.Field("FacilitySAPCode").AllowEditing(false).Width(100).HeaderText("Facility SAP Code").Add();
            col.Field("FacilityCode").AllowEditing(false).Width(400).HeaderText("Facility").ForeignKeyField("FacilityCode").ForeignKeyValue("Facility").DataSource((IEnumerable<object>)ViewBag.FacilityDataSource).IsPrimaryKey(true).Width(200).Add();

            col.Field("ProductSAPCode").AllowEditing(false).Width(100).HeaderText("Product SAP Code").Add();
            col.Field("item_code").AllowEditing(false).Width(400).HeaderText("Product").ForeignKeyField("product_code").ForeignKeyValue("product_description").DataSource((IEnumerable<object>)ViewBag.ProductDataSource).IsPrimaryKey(true).Width(200).Add();
            col.Field("Test_Used_2Months").AllowEditing(false).Width(90).HeaderText("Consumption").Add();
            col.Field("Quantity_Required").AllowEditing(false).Width(90).HeaderText("Total Drugs Required").Add();
            col.Field("Quantity_Allocated").AllowEditing(false).Width(90).HeaderText("Quantity Allocated").Add();
        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete"); })
)
@using (Html.BeginForm("SAPExport", "LMIS_HIVTestKits", FormMethod.Post))
{
    <div class="row">
        <div class="col-lg-3">
            <hr />
            @Html.EJ().Button("Export").Type(ButtonType.Submit).Size(ButtonSize.Large).Text("Export")
        </div>
    </div>
}